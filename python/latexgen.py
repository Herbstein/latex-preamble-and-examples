#!/usr/bin/env python

import os
import base64
import argparse
template = """JSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQolIExvYWQgUHJlYW1wbGUgICAgICAgICAlCiUlJSUl
JSUlJSUlJSUlJSUlJSUlJSUlJSUKClxkb2N1bWVudGNsYXNzW2E0LCBlbmdsaXNoXXthcnRpY2xl
fQoKJUltcG9ydCBmcm9tIHRoZSBzYW1lIGZvbGRlcgolXGlucHV0e3ByZWFtYmxlX2VuLnRleH0K
CiVJbXBvcnQgZnJvbSBhYnNvbHV0ZSBwYXRoCiVcdXNlcGFja2FnZXtpbXBvcnR9CiVcaW1wb3J0
e0M6L0dpdEh1Yi9MYVRlWF9QcmVhbWJsZV9hbmRfRXhhbXBsZXMvcHJlYW1ibGUvfXtwcmVhbWJs
ZV9kay50ZXh9CgolSW1wb3J0IGZyb20gYSByZWxhdGl2ZSBwYXRoClx1c2VwYWNrYWdle2ltcG9y
dH0KXHN1YmltcG9ydHsuLi9wcmVhbWJsZS99e3ByZWFtYmxlX2VuLnRleH0KCiUlJSUlJSUlJSUl
JSUlJSUlJSUlJSUlJSUKJSBEb2N1bWVudCBzdGFydHMgaGVyZSEgJQolJSUlJSUlJSUlJSUlJSUl
JSUlJSUlJSUlCgpcYmVnaW57ZG9jdW1lbnR9CgolIERlZmluZSB0aXRsZSBhbmQgbW9yZSBvbiBm
cm9udHBhZ2UKCVxzZXR0aXRsZXtUaXRsZX17U3VidGl0bGV9CiAgICBcYWRkYXV0aHtTdGVmZmFu
IFPDuGx2c3Rlbn17MjAxNTA1ODMyQHBvc3QuYXUuZGt9e1wsIGF1NTM0MDY4fQpcbWFrZXRpdGxl
CgpcYmVnaW57YWJzdHJhY3R9Clxub2luZGVudApMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwg
Y29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRp
ZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2
ZW5pYW0sIHF1aXMgbm9zdHJ1ZCBleGVyY2l0YXRpb24gdWxsYW1jbyBsYWJvcmlzIG5pc2kgdXQg
YWxpcXVpcCBleCBlYSBjb21tb2RvIGNvbnNlcXVhdC4KXGVuZHthYnN0cmFjdH0KClx0YWJsZW9m
Y29udGVudHMKClxuZXdwYWdlClxzZWN0aW9ue0ludHJvZHVjdGlvbn0gXGxhYmVse3NlYzppbnRy
b30KTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxp
dCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBt
YWduYSBhbGlxdWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCBxdWlzIG5vc3RydWQgZXhlcmNp
dGF0aW9uIHVsbGFtY28gbGFib3JpcyBuaXNpIHV0IGFsaXF1aXAgZXggZWEgY29tbW9kbyBjb25z
ZXF1YXQuCgoKClxiZWdpbnt0aGViaWJsaW9ncmFwaHl9ezl9ClxiaWJpdGVte2JpYml0ZW19CglM
YXN0LCBGaXJzdDogXGVtcGh7VGl0bGV9LCBwdWJsaWNhdGlvbiwgZWRpdGlvbiwgeWVhcgpcZW5k
e3RoZWJpYmxpb2dyYXBoeX0KXGJpYmxpb2dyYXBoeXN0eWxle2FiYnJ2fQpcYmlibGlvZ3JhcGh5
e3JlZmVyZW5jZXJ9CgpcbmV3cGFnZQpcYXBwZW5kaXgKXHNlY3Rpb257QXBwZW5kaXh9CkxvcmVt
IGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBk
byBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxp
cXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgcXVpcyBub3N0cnVkIGV4ZXJjaXRhdGlvbiB1
bGxhbWNvIGxhYm9yaXMgbmlzaSB1dCBhbGlxdWlwIGV4IGVhIGNvbW1vZG8gY29uc2VxdWF0LgoK
XGVuZHtkb2N1bWVudH0=
"""
preamble_base = """JSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSAgICBQYXBlcnNpemUgYW5kIGVuY29k
aW5nICAgICUKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKCiUgU2l6ZSBvZiBtYXJn
aW5zIGNhbiBiZSBjaGFuZ2VkIGhlcmUgaW4gdGhlIG91dGNvbW1lbnRlZCB2ZXJzaW9uIQolXHVz
ZXBhY2thZ2VbYTRwYXBlciwgdG90YWw9ezZpbiwgOGlufV17Z2VvbWV0cnl9CSV0b3RhbD17d2lk
dGgsIGhlaWdodH0KXHVzZXBhY2thZ2VbYTRwYXBlcl17Z2VvbWV0cnl9CgolIEJhc2ljczogZm9u
dCwgY29kZWMgZXRjLgpcdXNlcGFja2FnZVt1dGY4XXtpbnB1dGVuY30JCQkJCQklIGVuY29kaW5n
OiB1dGYtOCAobm9yZGljIGxldHRlcnMpClx1c2VwYWNrYWdlW1QxXXtmb250ZW5jfQkJCQkJCSUg
dXNlIDgtYml0IGVuY29kZWQgZm9udHMKXHJlbmV3Y29tbWFuZHtcc2ZkZWZhdWx0fXtwaHZ9CQkJ
CQklIGNoYW5nZXMgdGhlIGRlZmF1bHQgZm9udAoKJVx1c2VwYWNrYWdlW3BhcmZpbGxde3BhcnNr
aXB9ICAgICAgJUluc3RlYWQgb2YgaW5kZW50aW5nIG9uIGEgbmV3bGluZSBhZGRzIHdoaXRlc3Bh
Y2UKCgoKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSAgICAgIFRhYmxlcyBhbmQg
ZmlndXJlcyAgICAgICUKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKClx1c2VwYWNr
YWdle3RhYnVsYXJ4LGJvb2t0YWJzLGF1dGhibGt9CQkgICAgJSB2YXJpb3VzIGJhc2ljIHN0dWZm
IGZvciB0YWJsZXMgYW5kIG1vcmUKCiUgRmlndXJlcyBhbmQgY2FwdGlvbnMKXHVzZXBhY2thZ2V7
Y2FwdGlvbn0JCQkJCQkJJSBjcmVhdGUgY2FwdGlvbnMgZm9yIGZpZ3VyZXMKXHVzZXBhY2thZ2V7
c3ViZmlnfQkJCQkJCQkJJSBjcmVhdGUgc3ViZmlndXJlcyBvZiBhIGZpZ3VyZQolXHVzZXBhY2th
Z2V7c3ViY2FwdGlvbn0JCQkJCSUgY3JlYXRlIGNhcHRpb25zIGZvciBzdWJmaWd1cmVzCiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAlICAgICBjdXJyZW50bHkgb2ZmLCBkdWUgdG8g
Y29uZmxpY3RzCgpcdXNlcGFja2FnZXt3cmFwZmlnfQkJCQkJCQklIGxldHRpbmcgZmlndXJlcyBi
ZSBpbiB0ZXh0CgpcdXNlcGFja2FnZXtyb3RhdGluZ30gICAgICAgICAgICAgJSBsZXQgYW55IGVu
dmlyb25tZW50IGJlIHJvdGF0ZWQgKGZpZ3VyZXMgc2lkZXdheXMpCiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAlICAgICBcYmVnaW57c2lkZXdheXN9IG9yIFxiZWdpbnt0dXJufXsz
MH0KCgoKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCiUgICAgICAgICAgIFZh
cmlhYmxlcyAgICAgICAgICAgICAgJQolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUl
JSUKXHVzZXBhY2thZ2V7cGdma2V5c30JCQklSW5pdGlhbGl6ZSB0aGUgdmFyaWFibGUga2V5LXZh
bHVlIHBhcmlycwoKXG5ld2NvbW1hbmR7XHNldHZhbHVlfVsxXXtccGdma2V5c3svdmFyaWFibGVz
LyMxfX0KXG5ld2NvbW1hbmR7XGdldHZhbHVlfVsxXXtccGdma2V5c3ZhbHVlb2Z7L3ZhcmlhYmxl
cy8jMX19ClxuZXdjb21tYW5ke1xkZWNsYXJlfVsxXXslCiBccGdma2V5c3sKICAvdmFyaWFibGVz
LyMxLmlzIGZhbWlseSwKICAvdmFyaWFibGVzLyMxLnVua25vd24vLnN0eWxlID0ge1xwZ2ZrZXlz
Y3VycmVudHBhdGgvXHBnZmtleXNjdXJyZW50bmFtZS8uaW5pdGlhbCA9ICMjMX0KIH0lCn0KClxk
ZWNsYXJle30KCgoKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSAgICAgIExhVGVY
IFByb2dyYW1taW5nICAgICAgICUKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKClx1
c2VwYWNrYWdle3hwYXJzZX0JCQkJCQkJCSUgU2Nhbm5pbmcgYXJndW1lbnRzClx1c2VwYWNrYWdl
e2lmdGhlbn0JCQkJCQkJCSUgQ29uZGl0aW9uYWxzClx1c2VwYWNrYWdle2NhbGN9CQkJCQkJCQkl
IENhbGN1bGF0aW9ucwoKCgolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQolICAgICAg
ICAgIEh5cGVybWVkaWEgICAgICAgICAgJQolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUl
JQoKXHVzZXBhY2thZ2V7dXJsLCBoeXBlcnJlZn0JCQkJCQkJJSBcdXJse2xpbmt9IGFuZCBcaHJl
ZntsaW5rfXtyZXBsYWNpbmcgdGV4dH0KCiVNYWNyb3MgdGFrZW4gZnJvbSB0aGUgcHJlYW1ibGUg
b2YgdGhlIE1hdEZ5c1R1dG9yIExhVGVYIEd1aWRlLgpcbmV3Y29tbWFuZCp7XGh0dHB9WzFde1xo
cmVme2h0dHA6Ly8jMX17IzF9fQkJJSBtYWNybyBmb3IgaHR0cCBsaW5rczogXGh0dHB7d3d3Lm1h
dGZ5c3R1dG9yLmRrfQpcbmV3Y29tbWFuZCp7XG1haWx0b31bMV17XGhyZWZ7bWFpbHRvOiMxfXsj
MX19CQklIG1hY3JvIGZvciBtYWlsczogXG1haWx0b3tlbWFpbEBlbWFpbC5jb219CgolJSUlJSUl
JSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQolICAgICAgICAgU3R5bGl6YXRpb24gICAgICAgICAg
JQolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQoKJSBIZWFkZXJzIG9nIGZvb3RlcnMK
XHVzZXBhY2thZ2V7bGFzdHBhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgJSBcbGFzdHBh
Z2UgY29tbWFuZCBmb3IgbnVtYmVycyBvZiBwYWdlcwpcdXNlcGFja2FnZXtmYW5jeWhkcn0gICAg
ICAgICAgICAgICAgICAgICAgICAgICAlIGNyZWF0ZSBjb29sIGhlYWRlcnMgYW5kIGZvb3RlcnMK
XHBhZ2VzdHlsZXtmYW5jeX0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJSB3aG8gZG9l
c24ndCB3YW50IHRoZWlyIHBhZ2UgdG8gYmUgZmFuY3k/CgolIFVzZSBvZiBjb2x1bW5zClx1c2Vw
YWNrYWdle211bHRpY29sfQoKJSBRdW90YXRpb25zCiUgImRhbmlzaCIgb3IgImJyaXRpc2giClx1
c2VwYWNrYWdlW2RhbmlzaD1ndWlsbGVtZXRzXXtjc3F1b3Rlc30gICAgCSUgdHdvIHN0eWxlczog
InF1b3RlcyIgb3IgPj5ndWlsbGVtZXRzPDwKJVxNYWtlQXV0b1F1b3Rle8K7fXvCq30gICAgICAg
ICAgICAgICAgICAgICAgIAklIGRlY29tbWVudCBmb3IgZWFzeSBtYWNybwolXE1ha2VBdXRvUXVv
dGUqe+KAun174oC5fSAgICAgICAgICAgICAgICAgICAgICAJJSBkZWNvbW1lbnQgZm9yIGV2ZW4g
ZWFzaWVyIG1hY3JvcwoKJSBMaWtlIGEgcGFyYWdyYXBoLCBidXQgYWRkcyBhbHNvIGEgbGluZWJy
ZWFrIGFmdGVyLiAoQWxzbyBpcyBub3QgcmVjb3JkZWQgb24gbGFiZWxsaW5nKQpcbmV3Y29tbWFu
ZHtcbGJwYXJhZ3JhcGh9WzFde1x2c3BhY2V7MC4zZW19IFxub2luZGVudCBcdGV4dGJmeyMxfVxc
IFxub2luZGVudH0KCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCiUgICAgICAgICAg
ICAgTWF0aCAgICAgICAgICAgICAlCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCiVc
bmV3Y29tbWFuZHtcaG1tYXh9ezB9CQkJCQkJCQklIG1pbmltaXplcyB0aGUgYW1vdW50IG9mIGJv
bGQgZmFtaWxpZXMKJVxuZXdjb21tYW5ke1xibW1heH17MX0JCQkJCQkJCSUgdGhpcyBhbGxvd3Mg
Zm9yIG1vcmUgbWF0aCBmYW1pbGllcwoKJSB2YXJpb3VzIGJhc2ljIHN0dWZmClx1c2VwYWNrYWdl
e2JtLCBtYXRodG9vbHMsIGFtc21hdGh9CgolIFZhcmlvdXMgc3ltYm9sIHBhY2thZ2VzClx1c2Vw
YWNrYWdle2Ftc3N5bWJ9Clx1c2VwYWNrYWdlW3V0b3BpYV17bWF0aGRlc2lnbn0JCQkJCSAgICAl
IGZ1bGwgb3ZlcndyaXRlIG9mIHRoZSBmb250IHN5c3RlbQpcdXNlcGFja2FnZXtzdG1hcnlyZH0J
CQkJCQkJCSUgZXZlbiBtb3JlIHN5bWJvbHMKClxEZWNsYXJlTWF0aEFscGhhYmV0e1xtYXRocHpj
fXtPVDF9e3B6Y317bX17aXR9ICAgICAlIFxtYXRocHpjIGEgbGVzcyBwb21wb3VzIGN1cmx5IHR5
cGVzZXQKCiUgTWF0aCBzaG9ydGN1dHMKXHJlbmV3Y29tbWFuZHtcZH17XCwgXG1hdGhybXtkfX0g
ICAgICAgICAgICAgICAgICAgICUgXGQgPSBkaWZmZXJlbnRpYWwgZCB3aXRoIGEgYml0IG9mIHNw
YWNpbmcKXG5ld2NvbW1hbmR7XGV9e1xtYXRocm17ZX19ICAgICAgICAgICAgICAgICAgICAgICAg
ICUgXGUgPSBldWxlcnMgbnVtYmVyClxuZXdjb21tYW5ke1xSfXtcbWF0aGJie1J9fSAgICAgICAg
ICAgICAgICAgICAgICAgICAlIFxSID0gUmVhbCBudW1iZXJzClxuZXdjb21tYW5ke1xOfXtcbWF0
aGJie059fSAgICAgICAgICAgICAgICAgICAgICAgICAlIFxOID0gTmF0dXJhbCBudW1iZXJzClxu
ZXdjb21tYW5ke1xDfXtcbWF0aGJie0N9fSAgICAgICAgICAgICAgICAgICAgICAgICAlIFxDID0g
Q29tcGxleCBudW1iZXJzClxuZXdjb21tYW5ke1xRfXtcbWF0aGJie1F9fSAgICAgICAgICAgICAg
ICAgICAgICAgICAlIFxRID0gUmF0aW9uYWwgbnVtYmVycwpcbmV3Y29tbWFuZHtcRn17XG1hdGhi
YntGfX0JCQkJCQkJJSBcRgoKXG5ld2NvbW1hbmR7XGFic31bMV17XGxlZnRcbHZlcnQgIzEgXHJp
Z2h0XHJ2ZXJ0fQkJCSUgXGFic3thcmd9CQlhYnNvbHV0ZS9tb2R1bG8gb2YgdmFsdWUKXG5ld2Nv
bW1hbmR7XG5vcm19WzFde1xsZWZ0XGxWZXJ0ICMxIFxyaWdodFxyVmVydH0JCQklIFxub3Jte2Fy
Z30Jbm9ybSBvZiBhIHZhbHVlClxuZXdjb21tYW5ke1xjZWlsfVsxXXtcbGVmdFxsY2VpbCAjMSBc
cmlnaHRccmNlaWx9CQkJJSBcY2VpbHthcmd9CWNlaWxpbmcgb2YgYSB2YWx1ZQpcbmV3Y29tbWFu
ZHtcZmxvb3J9WzFde1xsZWZ0XGxmbG9vciAjMSBccmlnaHRccmZsb29yfQkJJSBcZmxvb3J7YXJn
fQlmbG9vciBvZiBhIHZhbHVlClxuZXdjb21tYW5ke1xpbnByb2R9WzJde1xsZWZ0XGxhbmdsZSAj
MSAsICMyIFxyaWdodFxyYW5nbGV9CSUgXGlucHJvZHthcmd9CWlubmVyIHByb2R1Y3QKClxuZXdj
b3VudGVye2l9CgpcRGVjbGFyZURvY3VtZW50Q29tbWFuZCBcc2VxIHsgZyBnIGcgZyB9IHsJCQkl
IFxzZXF7eH17aX17an17c30KCVxzZXRjb3VudGVye2l9ezB9CQkJCQkJCQklIHhfaSwgeF9pK3Ms
IC4uLiB4X2oKCVxJZlZhbHVlVCB7IzJ9IHsgXGFkZHRvY291bnRlcntpfXsjMn0gfQoJXElmVmFs
dWVURiB7IzF9CgkJeyMxfQoJCXt4fQoJX3sgXGFyYWJpY3tpfSB9LAoJXElmVmFsdWVURiB7IzR9
IAoJCXtcYWRkdG9jb3VudGVye2l9eyM0fX0KCQl7XGFkZHRvY291bnRlcntpfXsxfX0KCVxJZlZh
bHVlVEYgeyMxfSAKCQl7IzF9CgkJe3h9IAoJX3sgXGFyYWJpY3tpfSB9LAoJXGRvdHMKCVxJZlZh
bHVlVEYgeyMzfQoJCXsgLCAjMV97IzN9IH0KCQl7fQp9CgpcRGVjbGFyZURvY3VtZW50Q29tbWFu
ZCBcZXJvIHsgZyBnIH0gewkJCQklIFxlcm8ge3gsIHl9CglcYmVnaW57YXJyYXl9e2N9CQkJCQkJ
CQklCXgKCQlcSWZWYWx1ZVRGeyMxfQkJCQkJCQkJJQl+CgkJCXtfeyMxfX0JCQkJCQkJCQklCXkK
CQkJe1xwaGFudG9te1xzaW19fQoJXFwKCQlcc2ltCglcXAoJCVxJZlZhbHVlVEZ7IzJ9CgkJCXte
eyMyfX0KCQkJe1xwaGFudG9te1xzaW19fQoJXGVuZHthcnJheX0KfQoKXERlY2xhcmVEb2N1bWVu
dENvbW1hbmQgXHNldCB7IG0gZyB9eyAJCQkJJSBcc2V0c3tYfXtDfQoJIFxsZWZ0XGxicmFjZQkJ
CQkJCQkJCSUge1ggfCBDfQoJIAkjMSBcSWZWYWx1ZVQgeyMyfSB7IFwgfCBcICAjMiB9CgkgXHJp
Z2h0XHJicmFjZQp9CgpcbWFrZWF0bGV0dGVyCQkJCQkJCQkJCSUgYWRkcyB2ZXJ0aWNhbCBsaW5l
cyB0byBtYXRyaWNlcwpccmVuZXdjb21tYW5kKlxlbnZAbWF0cml4WzFdWypcY0BNYXhNYXRyaXhD
b2xzIGNdewogIFxoc2tpcCAtXGFycmF5Y29sc2VwCiAgXGxldFxAaWZuZXh0Y2hhclxuZXdAaWZu
ZXh0Y2hhcgogIFxhcnJheXsjMX19ClxtYWtlYXRvdGhlcgoKJSUlJSUlJSUlJSUlJSUlJSUlJSUl
JSUlJSUlJSUlJSUKJSAgICAgIExvZ2ljIGFuZCBwcm9vZnMgICAgICAgICUKJSUlJSUlJSUlJSUl
JSUlJSUlJSUlJSUlJSUlJSUlJSUKCiUgUHJvb2ZzClx1c2VwYWNrYWdle2Ftc3RobX0JCQkJCQkJ
CSUgVGhlb3JlbSBwYWNrYWdlClx0aGVvcmVtc3R5bGV7ZGVmaW5pdGlvbn0JCQkJCQklIHBsYWlu
LCBkZWZpbml0aW9uLCByZW1hcmsKJVxzd2FwbnVtYmVycwkJCQkJCQkJCSUgSWYgeW91IHdhbnQg
dG8gaGF2ZSB0aGUgbnVtYmVyIGZpcnN0CgolIExvZ2ljIHBhY2thZ2VzClx1c2VwYWNrYWdle2xw
bGZpdGNofQkJCQkJCSUgZml0Y2ggc3R5bGUgcHJvb2ZzCgolXHVzZXBhY2thZ2V7bG9naWNwcm9v
Zn0JCQkJCSUgYWx0ZXJuYXRpdmUgcGFja2FnZSwgcmVzZW1ibGluZyB0aGUgZEJlckxvZyBib29r
CiVcc2V0bGVuZ3RoXHN1YnByb29maG9yaXpzcGFjZXsyZW19CQkJJSBJbmRlbnQgZm9yIHN1YnBy
b29mcy4gQ2hhbmdlZCBmb3IgZnJlc2ggdmFyaWFibGVzCgoKCiUlJSUlJSUlJSUlJSUlJSUlJSUl
JSUlJSUlJSUlJSUlCiUgICAgICBDb2xvciBhbmQgcHJlc2V0cyAgICAgICAlCiUlJSUlJSUlJSUl
JSUlJSUlJSUlJSUlJSUlJSUlJSUlCgolXHVzZXBhY2thZ2V7eGNvbG9yfQkJCQkJCQklIGJhc2lj
IHhjb2xvciBwYWNrYWdlClx1c2VwYWNrYWdlW3RhYmxlLHhjZHJhd117eGNvbG9yfQkJCQklIHhj
b2xvciBwYWNrYWdlIHdpdGggc3VwcG9ydCBmb3IgdGFibGVzClxkZWZpbmVjb2xvcntsc3RDb21t
ZW50fXtyZ2J9ezAuNDUsMC40NSwwLjQ1fQklIGNvZGU6IGNvbW1lbnRzIChHcmV5KQpcZGVmaW5l
Y29sb3J7bHN0S2V5fXtyZ2J9ezAuMTMsMC4yMSwxfQkJCSUgY29kZTogcHJpbWFyeSBrZXl3b3Jk
cyAoQmx1ZSkKXGRlZmluZWNvbG9ye2xzdEtleTJ9e3JnYn17MSwwLjY2NjY2NywwLjEzNzI2fSAg
JSBjb2RlOiBzZWNvbmRhcnkga2V5d29yZHMgKERheVs5XSBPcmFuZ2UpClxkZWZpbmVjb2xvcnts
c3RTdHJpbmd9e3JnYn17MC4xLDAuNjUsMC4xfQkJJSBjb2RlOiBzdHJpbmdzIChHcmVlbikKXGRl
ZmluZWNvbG9ye2xzdEJhc2V9e3JnYn17MC4wLDAuMCwwLjB9CQkJJSBjb2RlOiBiYXNlIChCbGFj
aykKCgoKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSAgICAgICAgICAgIFRpa3og
ICAgICAgICAgICAgICUKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKClx1c2VwYWNr
YWdle3Rpa3p9CQkJCQkJCQklIGltcG9ydCBiYXNlcGFja2FnZQpcdXNldGlremxpYnJhcnl7Y2Fs
Y30JCQkJCQkJJSBDb29yZGluYXRlIGNhbGN1YXRpb25zClx1c2V0aWt6bGlicmFyeXtwb3NpdGlv
bmluZ30gICAgICAgICAgICAgICAgICAgICUgUmVsYXRpdmUgcG9zaXRpb25pbmcKXHVzZXRpa3ps
aWJyYXJ5e3NoYXBlc30gICAgICAgICAgICAgICAgICAgICAgICAgJSBEZWZpbmluZyBub2Rlc2hh
cGVzIGFuZCBtb3JlIChpc2EgZm9yIEUvUikKCiUgU2ltcGxlIHRyZWUgbWFjcm8gd2l0aCBjb21w
YWJpbGl0eSB0byB0aWt6Clx1c2VwYWNrYWdle3Rpa3otcXRyZWV9CQkJCQkJCSUgaW1wb3J0IHNp
bXBsZSB0cmVlIG1hY3JvClx1c2V0aWt6bGlicmFyeXthcnJvd3N9ICAgICAgICAgICAgICAgICAg
ICAgICAgICUgYXJyb3dzIGZvciB0cmVlcwoKJSBUaWt6IHNldHRpbmdzIGZvciByZWQtYmxhY2sg
dHJlZXMKXHRpa3pzZXR7CiAgdHJlZW5vZGUvLnN0eWxlID0ge2FsaWduPWNlbnRlciwgaW5uZXIg
c2VwPTBwdCwgdGV4dCBjZW50ZXJlZCwKICAgIGZvbnQ9XHNmZmFtaWx5fSwKICBhcm5fYi8uc3R5
bGUgPSB7dHJlZW5vZGUsIGNpcmNsZSwgd2hpdGUsIGZvbnQ9XHNmZmFtaWx5XGJmc2VyaWVzLCBk
cmF3PWJsYWNrLAogICAgZmlsbD1ibGFjaywgdGV4dCB3aWR0aD0xLjVlbX0sICAgICAgICAgICAg
ICAlIGJsYWNrIG5vZGUKICBhcm5fci8uc3R5bGUgPSB7dHJlZW5vZGUsIGNpcmNsZSwgd2hpdGUs
IGZvbnQ9XHNmZmFtaWx5XGJmc2VyaWVzLCBkcmF3PXJlZCwKICAgIGZpbGw9cmVkLCB0ZXh0IHdp
ZHRoPTEuNWVtfSwgICAgICAgICAgICAgICUgcmVkIG5vZGUKICBhcm5feC8uc3R5bGUgPSB7dHJl
ZW5vZGUsIHJlY3RhbmdsZSwgZHJhdz1ibGFjaywgZmlsbD1ibGFjaywKICAgIG1pbmltdW0gd2lk
dGg9MC41ZW0sIG1pbmltdW0gaGVpZ2h0PTAuNWVtfSAgJSBuaWwgbm9kZQp9CgolIFRpa3ogQXV0
b21vdGEgZm9yIFR1cmluZyBNYWNoaW5lcwpcdXNldGlremxpYnJhcnl7YXV0b21hdGF9CgolIFRp
a3ogRS9SIGRpYWdyYW0KXHVzZXRpa3psaWJyYXJ5e2VyfQoKJSBHcmFwaGljcyBhbmQgcGxvdHMK
XHVzZXBhY2thZ2V7Z3JhcGhpY3h9CQkJCQkJCSUgaW1wb3J0IGJhc2VwYWNrYWdlIGZvciBncmFw
aHMKXHVzZXBhY2thZ2V7cGdmcGxvdHN9CQkJCQkJCSUgaW1wb3J0IHBnZnBsb3RzClx1c2VwZ2Zw
bG90c2xpYnJhcnl7ZmlsbGJldHdlZW59CQkJCSUgYWRkIGZpbGxCZXR3ZWVuIGNvbW1hbmQKXHBn
ZnBsb3Rzc2V0e2NvbXBhdD0xLjEwfQkJCQkJCSUgY2hvb3NlIHZlcnNpb24gb2YgcGdmcGxvdHMK
CiUgTWFjcm8gZm9yIGNpcmNsZSB3aXRoIHN5bWJvbCBpbnNpZGUuClxuZXdjb21tYW5kKlxjaXJj
bGVkWzFdeyBcdGlreltiYXNlbGluZT0oQy5iYXNlKV1cbm9kZVtkcmF3LGNpcmNsZSxpbm5lciBz
ZXA9MC41cHRdKEMpIHsjMX07XCF9CgoKCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUl
CiUgICAgICAgICAgICBDb2RlICAgICAgICAgICAgICAlCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUl
JSUlJSUlJSUlClxuZXdjb21tYW5ke1xjb2RlfVsxXXt7XHNmICMxfX0JCQkJCSUgXGNvZGV7WH0g
d3JpdGVzIFggaW4gYSBjb2RlLWFwcHJvcHJpYXRlIGZvbnQKCgoKCiUlJSUlJSUlJSUlJSUlJSUl
JSUlJSUlJSUlJSUlJSUlCiUgICAgICAgICBsc3RsaXN0aW5nICAgICAgICAgICAlCiUlJSUlJSUl
JSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCgolIEltcG9ydCBsc3RsaXN0aW5ncyAtIGJlYXV0aWZ1
bCBzb3VyY2Vjb2RlIQpcdXNlcGFja2FnZXtsaXN0aW5nc30KCgolIEN1c3RvbSBsYW5ndWFnZSBk
ZWZpbml0aW9ucwolIERlZmluaXRpb24gb2YgUHNldWRvY29kZQpcbHN0ZGVmaW5lbGFuZ3VhZ2V7
cHNldWRvY29kZX17CiAga2V5d29yZHM9WzFdewogIAkgICAgIGJ5LCBieSwgZG8sIGRvd250bywg
ZWxzZSwgZXJyb3IsIGZvciwgaWYsIHJlcGVhdCwgcmV0dXJuLCB0bywgdW50aWwsIHdoaWxlLCB3
aGlsZQogIAl9LAkJCQkJCQkJICAgIAkJJSBsaXN0IG9mIGtleXdvcmRzLCBmaXJzdCBhbmQgbGFz
dCBhcmUgbm90IHVzZWQKICBrZXl3b3Jkcz1bMl17CiAgICAgICAgYW5kLCBhbmQsIG9yLCBOSUws
IE5JTAogIH0KICBzZW5zaXRpdmU9ZmFsc2UsCQkJCQkJCQklIGtleXdvcmRzIGFyZSBub3QgY2Fz
ZS1zZW5zaXRpdmUKICBtb3JlY29tbWVudD1bbF17Ly99LAkJCQkJCQklIGwgaXMgZm9yIGxpbmUg
Y29tbWVudAogIG1vcmVjb21tZW50PVtzXXsvKn17Ki99LAkJCQkJCSUgcyBpcyBmb3Igc3RhcnQg
YW5kIGVuZCBkZWxpbWl0ZXIKICBtb3Jlc3RyaW5nPVtiXSIJCQkJCQkJCSUgc3RyaW5ncyBhcmUg
ZW5jbG9zZWQgaW4gZG91YmxlIHF1b3Rlcwp9CgoKJSBTZXR0aW5ncyBmb3IgbHN0bGlzdGluZ3MK
XGxzdHNldHtsYW5ndWFnZT1wc2V1ZG9jb2RlLAkJCQkJJSBjaG9vc2UgbGFuZ3VhZ2UKICBjb2x1
bW5zPWZsZXhpYmxlLAkJCQkJCQkJJSBsZXQgdGhlIGJveCBhbGlnbiB0byB0aGUgd2lkdGggb2Yg
dGhlIHBhZ2UKICAgIGxpdGVyYXRlPXvDpn17e1xhZX19MXvDuH17e1xvfX0xe8OlfXt7XGFhfX0x
CSUgYWxsb3cgw6YsIMO4IGFuZCDDpSBpbiBjb2RlCiAgICAgICAgICAge8OGfXt7XEFFfX0xe8OY
fXt7XE99fTF7w4V9e3tcQUF9fTEsCSUgCSh0aGlzIGNoYW5nZSB3YXMgdGFrZW4gZnJvbSB0aGUg
cHJlYW1ibGUgb2YgdGhlIE1hdEZ5c1R1dG9yIExhVGVYIEd1aWRlKQogIGJyZWFrbGluZXM9dHJ1
ZSwJCQkJCQkJCSUgYXV0b21hdGljYWxseSBicmVhayBsaW5lcwogIGJyZWFrYXR3aGl0ZXNwYWNl
PXRydWUsCQkJCQkJJSBhdXRvbWF0aWNhbGx5IGJyZWFrIHNob3VsZCB0aGVyZSBvbmx5IGJlIHdo
aXRlIHNwYWNlLgogIG51bWJlcnM9bGVmdCwJCQkJCQkJCQklIG51bWJlcmluZzogbm9uZSwgbGVm
dCwgcmlnaHQKICBudW1iZXJzZXA9NXB0LAkJCQkJCQkJJSBkaXN0YW5jZSBiZXR3ZWVuIGxpbmVu
dW1iZXJzIGFuZCBjb2RlCiAgbnVtYmVyc3R5bGU9XGNvbG9ye2xzdENvbW1lbnR9LAkJCQklIGNo
YW5nZSBzdHlsZSBvZiBudW1iZXJpbmcgLSBjdXJyZW50bHkgZ3JleS4KICBzdGVwbnVtYmVyPTEs
CQkJCQkJCQkJJSBzdGVwIGJldHdlZW4gdG8gbGluZS1udW1iZXJzLiAxID0gZWFjaCBsaW5lIGlz
IG51bWJlcmVkCiAgc2hvd3NwYWNlcz1mYWxzZSwJCQkJCQkJCSUgc2hvdyBzcGFjZXMgZXZlcnl3
aGVyZSAtIGFkZGluZyBwYXJ0aWN1bGFyIHVuZGVyc2NvcmVzCiAgc2hvd3N0cmluZ3NwYWNlcz1m
YWxzZSwJCQkJCQklIHVuZGVybGluZSBzcGFjZXMgd2l0aGluIHN0cmluZ3Mgb25seS4KICBzaG93
dGFicz1mYWxzZSwJCQkJCQkJCSUgc2hvdyB0YWJzIHdpdGhpbiBzdHJpbmdzIGFkZGluZyBwYXJ0
aWN1bGFyIHVuZGVyc2NvcmVzLgogIGVzY2FwZWluc2lkZT17KkB9e0AqfSwgICAgICAgICAgICAg
ICAgCQklIGlmIHlvdSB3YW50IHRvIGFkZCBMYVRlWCB3aXRoaW4geW91ciBjb2RlCiAgYmFzaWNz
dHlsZT1cdHRmYW1pbHkgXGNvbG9ye2xzdEJhc2V9LAkJCSUgc2V0IGJhc2ljIGNvbG9yCiAgY29t
bWVudHN0eWxlPVxjb2xvcntsc3RDb21tZW50fSwJCQkJJSBzZXQgY29sb3Igb2YgY29tbWVudHMK
ICBrZXl3b3Jkc3R5bGU9WzFdXGNvbG9ye2xzdEtleX0sCQkJCSUgc2V0IGNvbG9yIG9mIHByaW1h
cnkga2V5d29yZHMKICBrZXl3b3Jkc3R5bGU9WzJdXGNvbG9ye2xzdEtleTJ9LAkJCQklIHNldCBj
b2xvciBvZiBzZWNvbmRhcnkga2V5d29yZHMKICBzdHJpbmdzdHlsZT1cY29sb3J7bHN0U3RyaW5n
fSwJCQkJJSBzZXQgY29sb3Igb2Ygc3RyaW5ncwp9CgolIGxzdGxpc3RpbmcgLSBQdXQgaXQgYmVh
dXRpZnVsbHkgaW4gdGhlIG1pZGRsZQpcbHN0c2V0e3hsZWZ0bWFyZ2luPSAuMVx0ZXh0d2lkdGgg
LCAgICAgCQkJCQkJCSUgbGVmdG1hcmdpbiBiZWluZyAxMCUgb2YgdGhlIGN1cnJlbnQgd2lkdGgK
ICB4cmlnaHRtYXJnaW49IC4xXHRleHR3aWR0aCwgICAgICAgICAgIAkJCQkJCQklIHJpZ2h0IG1h
cmdpbiBhbHNvIDEwJQogIGZyYW1lPWJvdHRvbWxpbmUgICAgICAgICAgICAgICAgICAgICAgCQkJ
CQkJCSUgRHJhdyBhIGxpbmUgb24gdGhlIGJvdHRvbSBvZiB0aGUgc3Vycm91bmRpbmcgYm94Cn0K
CiUgbHN0bGlzdGluZyBoZWFkZXIKXERlY2xhcmVDYXB0aW9uRm9udHt3aGl0ZX17XGNvbG9ye3do
aXRlfX0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAlIGZvbnRzdHlsZSBv
ZiBjYXB0aW9uClxEZWNsYXJlQ2FwdGlvbkZvcm1hdHtsaXN0aW5nfXtcY29sb3Jib3h7Z3JheX17
XHBhcmJveHtcbGluZXdpZHRofXsjMSMyIzN9fX0gICAgJSBjcmVhdGUgbmljZSBncmV5IGJveGVz
IGZvciBjYXB0aW9ucwpcY2FwdGlvbnNldHVwW2xzdGxpc3Rpbmdde2Zvcm1hdD1saXN0aW5nLGxh
YmVsZm9udD13aGl0ZSx0ZXh0Zm9udD13aGl0ZX0gICAgICAgICUgYXBwbHkgc2V0dGluZ3MgdG8g
bGlzdGluZwoKCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQolICAgICAgVGl0
bGUgYW5kIGluZm9ybWF0aW9uICAgICAgICUKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUl
JSUlJSUlClxzZXR2YWx1ZXt0aXRsZSA9IH0KXHNldHZhbHVle3N1YnRpdGxlID0gfQoKXERlY2xh
cmVEb2N1bWVudENvbW1hbmQgXHNldHRpdGxlIHsgbSBnIH17IAkJCQklIFxzZXRUaXRsZXt0aXRs
ZX17c3VidGl0bGV9CgkgXHNldHZhbHVle3RpdGxlID0gIzF9CgkgXElmVmFsdWVURiB7IzJ9IHsg
XHNldHZhbHVle3N1YnRpdGxlID0gIzJ9IFx0aXRsZXtcaHVnZSBcZ2V0dmFsdWV7dGl0bGV9IFxc
IFxsYXJnZSBcZ2V0dmFsdWV7c3VidGl0bGV9fX0KCSAJCQkJIHsgXHRpdGxle1xodWdlIFxnZXR2
YWx1ZXt0aXRsZX19IH0KfQoKXHNldHZhbHVle25hbWUgPSB9ClxzZXR2YWx1ZXtlbWFpbCA9IH0K
XHNldHZhbHVle2lkID0gfQoKXERlY2xhcmVEb2N1bWVudENvbW1hbmQgXGFkZGF1dGggeyBtIGcg
ZyB9eyAJCQklIFxhZGRBdXRoe25hbWV9e2VtYWlsfXtpZH0KCSBcc2V0dmFsdWV7bmFtZSA9ICMx
fQoJIFxhdXRob3J7IzF9CgkgXElmVmFsdWVUIHsjMn0gewoJIAlcc2V0dmFsdWV7ZW1haWwgPSAj
Mn0KCSAJXGFmZmlse1xwcm90ZWN0XGhyZWZ7bWFpbHRvOiMyfXsjMn19CgkgfQoJIFxJZlZhbHVl
VCB7IzN9IHsKCSAJXHNldHZhbHVle2lkID0gIzN9CgkgfQp9Cgpcc2V0dGl0bGV7S2VlcCBDYWxt
IGFuZCBcdGV4dGJhY2tzbGFzaCBzZXR0aXRsZX0KClxkYXRle1x0b2RheX0KClxzZXR2YWx1ZXtv
ZiA9IG9mfQoKXGxoZWFke1xwcm90ZWN0XGhyZWZ7XGdldHZhbHVle2VtYWlsfX17XGdldHZhbHVl
e25hbWV9XGdldHZhbHVle2lkfX0gXFwgXGdldHZhbHVle3RpdGxlfX0KXGNoZWFke30KXHJoZWFk
e1x0aGVwYWdlXCBcZ2V0dmFsdWV7b2Z9IFxwYWdlcmVme0xhc3RQYWdlfSBcXCBcbm91cHBlcmNh
c2V7XGxlZnRtYXJrfX0KCiVcbGZvb3R7fQolXGNmb290e30KJVxyZm9vdHt9Cg==
"""
preamble_en = """JSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSBTZXR0aW5ncyBmb3IgZG9jdW1l
bnQgKGVuZ2xpc2gpICUKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKCiUgSW5w
dXQgY29tbW9uIGRlZmluaXRpb24KXGlucHV0e3ByZWFtYmxlX2Jhc2UudGV4fQoKCiUlJSUlJSUl
JSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCiUgICBFbmNvZGluZyBhbmQgaHlwaGVuYXRpb24gICAl
CiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCiUgQmFzaWNzOiBmb250LCBjb2RlYyBl
dGMuClx1c2VwYWNrYWdlW2VuZ2xpc2hde2JhYmVsfQkJCQkJCSUgYmFiZWwgaXMgZm9yIGh5cGhl
bmF0aW9uIGFuZCBvdGhlciBnb29kaWVzCgoKCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUl
JSUlCiUgICAgICAgICBsc3RsaXN0aW5nICAgICAgICAgICAlCiUlJSUlJSUlJSUlJSUlJSUlJSUl
JSUlJSUlJSUlJSUlClxyZW5ld2NvbW1hbmR7XGxzdGxpc3RpbmduYW1lfXtDb2RlfSAgICAgICAg
ICAgICAgJSBmb3Igb25lIGJsb2NrIG9mIGNvZGUgYWxvbmUKXHJlbmV3Y29tbWFuZHtcbHN0bGlz
dGxpc3RpbmduYW1lfXtMaXN0IG9mIGNvZGV9ICAlIGZvciBtb3JlIHBpZWNlcyBvZiBjb2RlIGlu
IG9uZQoKCgolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQolICAgICAgTG9naWMgYW5k
IHByb29mcyAgICAgICAgJQolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQolIFRoZW9y
ZW0gZW52aXJvbm1lbnRzClxuZXd0aGVvcmVte3RoZW9yZW19e1RoZW9yZW19W3NlY3Rpb25dClxu
ZXd0aGVvcmVte2xlbW1hfXtMZW1tYX1bc2VjdGlvbl0KXG5ld3RoZW9yZW17cHJvcG9zaXRpb259
e1Byb3Bvc2l0aW9ufVtzZWN0aW9uXQpcbmV3dGhlb3JlbXtjb3JvbGxhcnl9e0Nvcm9sbGFyeX1b
c2VjdGlvbl0KXG5ld3RoZW9yZW17ZGVmaW5pdGlvbn17RGVmaW5pdGlvbn1bc2VjdGlvbl0KXG5l
d3RoZW9yZW17Y29uamVjdHVyZX17Q29uamVjdHVyZX1bc2VjdGlvbl0KXHJlbmV3Y29tbWFuZCp7
XHByb29mbmFtZX17UHJvb2Z9CgoKCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCiUg
ICAgICBFeGFtcGxlIGVudmlyb25tZW50ICAgICAlCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUl
JSUlJSUlClxuZXd0aGVvcmVte2V4YW1wbGV9e0V4YW1wbGV9W3NlY3Rpb25d
"""
preamble_dk = """JSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQolIFNldHRpbmdzIGZvciBkb2N1bWVu
dCAoZGFuaXNoKSAlCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKCiUgSW5wdXQg
Y29tbW9uIGRlZmluaXRpb24KXGlucHV0e3ByZWFtYmxlX2Jhc2UudGV4fQoKJSUlJSUlJSUlJSUl
JSUlJSUlJSUlJSUlJSUlJSUlJSUKJSAgIEVuY29kaW5nIGFuZCBoeXBoZW5hdGlvbiAgICUKJSUl
JSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSBCYXNpY3M6IGZvbnQsIGNvZGVjIGV0Yy4K
XHVzZXBhY2thZ2VbZGFuaXNoXXtiYWJlbH0JCQkJCQklIGJhYmVsIGlzIGZvciBoeXBoZW5hdGlv
biBhbmQgb3RoZXIgZ29vZGllcwpccmVuZXdjb21tYW5ke1xkYW5pc2hoeXBoZW5taW5zfXsyMn0J
CQklIGV2ZW4gYmV0dGVyIGRhbmlzaCBoeXBoZW5hdGlvbiEKCiUgLmJpYiBkYW5pc2ggcmVkZWZp
bml0aW9uIGZvciBhdXRob3IgaW4gdGl0bGUKXHJlbmV3Y29tbWFuZFxBdXRoYW5keyBvZyB9Clxy
ZW5ld2NvbW1hbmRcQXV0aGFuZHN7LCBvZyB9ClxyZW5ld2NvbW1hbmRcQWZmaWxmb250e1xzbWFs
bH0KCgoKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSAgICAgICAgIGxzdGxpc3Rp
bmcgICAgICAgICAgICUKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKCiUgbHN0bGlz
dGluZyBsYW5ndWFnZSByZWRlZmluaXRpb25zClxyZW5ld2NvbW1hbmR7XGxzdGxpc3RpbmduYW1l
fXtLb2RlfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJSBmb3Ig
b25lIGJsb2NrIG9mIGNvZGUgYWxvbmUKXHJlbmV3Y29tbWFuZHtcbHN0bGlzdGxpc3RpbmduYW1l
fXtMaXN0ZSBhZiBcbHN0bGlzdGluZ25hbWUgcn0gICAgICAgICAgICAgICAgICAlIGZvciBtb3Jl
IHBpZWNlcyBvZiBjb2RlIGluIG9uZQoKCgolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUl
JQolICAgICAgTG9naWMgYW5kIHByb29mcyAgICAgICAgJQolJSUlJSUlJSUlJSUlJSUlJSUlJSUl
JSUlJSUlJSUlJQolIFRoZW9yZW0gZW52aXJvbm1lbnRzClxuZXd0aGVvcmVte3RoZW9yZW19e1PD
pnRuaW5nfVtzZWN0aW9uXQpcbmV3dGhlb3JlbXtsZW1tYX17TGVtbWF9W3NlY3Rpb25dClxuZXd0
aGVvcmVte3Byb3Bvc2l0aW9ufXtQcm9wb3NpdGlvbn1bc2VjdGlvbl0KXG5ld3RoZW9yZW17Y29y
b2xsYXJ5fXtLb3JvbGxhcn1bc2VjdGlvbl0KXG5ld3RoZW9yZW17ZGVmaW5pdGlvbn17RGVmaW5p
dGlvbn1bc2VjdGlvbl0KXG5ld3RoZW9yZW17Y29uamVjdHVyZX17Rm9ybW9kbmluZ31bc2VjdGlv
bl0KXHJlbmV3Y29tbWFuZCp7XHByb29mbmFtZX17QmV2aXN9CgoKJSUlJSUlJSUlJSUlJSUlJSUl
JSUlJSUlJSUlJSUlJSUKJSAgICAgIEV4YW1wbGUgZW52aXJvbm1lbnQgICAgICUKJSUlJSUlJSUl
JSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKXG5ld3RoZW9yZW17ZXhhbXBsZX17RWtzZW1wZWx9W3Nl
Y3Rpb25dCgoKCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCiUgICAgICAgVGl0bGUg
YW5kIGxheW91dCAgICAgICAlCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlClxzZXR2
YWx1ZXtvZiA9IGFmfQo=
"""

    
parser = argparse.ArgumentParser(description='Make a LaTeX project from Steffan\'s awesome template')
parser.add_argument('path', type=str, nargs='+', help='the path to build the project')
parser.add_argument('-l', type=str, nargs=1, help='the language of the preamble, "en" or "dk"', default=["en"])
parser.add_argument('--zip', dest='zip', action='store_const', const=True, default=False, help='zip the resulting project')
#TODO: Add -c option to clean folders first / after
args = parser.parse_args()

preamble_locale = 'preamble_dk' if args.l[0] == 'dk' else 'preamble_en'
preamble_l_content = preamble_dk if args.l[0] == 'dk' else preamble_en
preamble_l_content = base64.decodestring( preamble_l_content )
preamble_base_content = base64.decodestring( preamble_base )
template_content = base64.decodestring( template )

#TODO: make this specifiable in the prepare.py
######## MODIFICATIONS ########

template_content = template_content.replace( '\subimport{../preamble/}{preamble_en.tex}',
'\subimport{preamble/}{' + preamble_locale + '.tex}')

###############################

PATH = " ".join(args.path)
if not os.path.exists(PATH):
    os.makedirs(PATH)
os.chdir(PATH)
if not os.path.exists('preamble'):
    os.mkdir('preamble')
with open(os.path.join('preamble', preamble_locale + '.tex'), 'w') as preamble_l_file:
    preamble_l_file.write(preamble_l_content)

with open(os.path.join('preamble', 'preamble_base.tex'), 'w') as preamble_base_file:
    preamble_base_file.write(preamble_base_content)

with open('template.tex', 'w') as template_file:
    template_file.write(template_content)

if args.zip:
    fname = os.getcwd() #includes the filepath, sice we cd'ed to it
    import zipfile
    zipf = zipfile.ZipFile(fname + '.zip', 'w', zipfile.ZIP_DEFLATED)
    zipf.write(os.path.join('preamble', preamble_locale + '.tex'))
    zipf.write(os.path.join('preamble', 'preamble_base.tex'))
    zipf.write('template.tex')
    zipf.close()
raw_input('Success, Press enter to exit')

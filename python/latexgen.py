#!/usr/bin/env python

import os
import base64
import argparse
template = """JSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQolIExvYWQgUHJlYW1wbGUgICAgICAgICAlCiUlJSUl
JSUlJSUlJSUlJSUlJSUlJSUlJSUKClxkb2N1bWVudGNsYXNzW2E0LCBlbmdsaXNoLCB0d29zaWRl
ZF17YXJ0aWNsZX0KCiVJbXBvcnQgZnJvbSB0aGUgc2FtZSBmb2xkZXIKJVxpbnB1dHtwcmVhbWJs
ZV9lbi50ZXh9CgolSW1wb3J0IGZyb20gYWJzb2x1dGUgcGF0aAolXHVzZXBhY2thZ2V7aW1wb3J0
fQolXGltcG9ydHtDOi9HaXRIdWIvTGFUZVhfUHJlYW1ibGVfYW5kX0V4YW1wbGVzL3ByZWFtYmxl
L317cHJlYW1ibGVfZGsudGV4fQoKJUltcG9ydCBmcm9tIGEgcmVsYXRpdmUgcGF0aApcdXNlcGFj
a2FnZXtpbXBvcnR9ClxzdWJpbXBvcnR7Li4vcHJlYW1ibGUvfXtwcmVhbWJsZV9lbi50ZXh9Cgol
JSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCiUgRG9jdW1lbnQgc3RhcnRzIGhlcmUhICUKJSUlJSUl
JSUlJSUlJSUlJSUlJSUlJSUlJQoKXGJlZ2lue2RvY3VtZW50fQoKJSBEZWZpbmUgdGl0bGUgYW5k
IG1vcmUgb24gZnJvbnRwYWdlCglcc2V0dGl0bGV7VGl0bGV9e1N1YnRpdGxlfQogICAgXGFkZGF1
dGh7U3RlZmZhbiBTw7hsdnN0ZW59ezIwMTUwNTgzMkBwb3N0LmF1LmRrfXtcLCBhdTUzNDA2OH0K
XG1ha2V0aXRsZQoKXGJlZ2lue2Fic3RyYWN0fQpcbm9pbmRlbnQKTG9yZW0gaXBzdW0gZG9sb3Ig
c2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVt
cG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuIFV0IGVuaW0g
YWQgbWluaW0gdmVuaWFtLCBxdWlzIG5vc3RydWQgZXhlcmNpdGF0aW9uIHVsbGFtY28gbGFib3Jp
cyBuaXNpIHV0IGFsaXF1aXAgZXggZWEgY29tbW9kbyBjb25zZXF1YXQuClxlbmR7YWJzdHJhY3R9
CgpcdGFibGVvZmNvbnRlbnRzCgpcbmV3cGFnZQpcc2VjdGlvbntJbnRyb2R1Y3Rpb259IFxsYWJl
bHtzZWM6aW50cm99CkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlw
aXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBl
dCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgcXVpcyBub3N0
cnVkIGV4ZXJjaXRhdGlvbiB1bGxhbWNvIGxhYm9yaXMgbmlzaSB1dCBhbGlxdWlwIGV4IGVhIGNv
bW1vZG8gY29uc2VxdWF0LgoKCgpcYmVnaW57dGhlYmlibGlvZ3JhcGh5fXs5fQpcYmliaXRlbXti
aWJpdGVtfQoJTGFzdCwgRmlyc3Q6IFxlbXBoe1RpdGxlfSwgcHVibGljYXRpb24sIGVkaXRpb24s
IHllYXIKXGVuZHt0aGViaWJsaW9ncmFwaHl9ClxiaWJsaW9ncmFwaHlzdHlsZXthYmJydn0KXGJp
Ymxpb2dyYXBoeXtyZWZlcmVuY2VyfQoKXG5ld3BhZ2UKXGFwcGVuZGl4ClxzZWN0aW9ue0FwcGVu
ZGl4fQpMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBl
bGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3Jl
IG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sIHF1aXMgbm9zdHJ1ZCBleGVy
Y2l0YXRpb24gdWxsYW1jbyBsYWJvcmlzIG5pc2kgdXQgYWxpcXVpcCBleCBlYSBjb21tb2RvIGNv
bnNlcXVhdC4KClxlbmR7ZG9jdW1lbnR9
"""
preamble_base = """JSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSAgICBQYXBlcnNpemUgYW5kIGVuY29k
aW5nICAgICUKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKCiUgU2l6ZSBvZiBtYXJn
aW5zIGNhbiBiZSBjaGFuZ2VkIGhlcmUgaW4gdGhlIG91dGNvbW1lbnRlZCB2ZXJzaW9uIQolXHVz
ZXBhY2thZ2VbYTRwYXBlciwgdG90YWw9ezZpbiwgOGlufV17Z2VvbWV0cnl9CSV0b3RhbD17d2lk
dGgsIGhlaWdodH0KXHVzZXBhY2thZ2VbYTRwYXBlcl17Z2VvbWV0cnl9CgolIEJhc2ljczogZm9u
dCwgY29kZWMgZXRjLgpcdXNlcGFja2FnZVt1dGY4XXtpbnB1dGVuY30JCQkJCQklIGVuY29kaW5n
OiB1dGYtOCAobm9yZGljIGxldHRlcnMpClx1c2VwYWNrYWdlW1QxXXtmb250ZW5jfQkJCQkJCSUg
dXNlIDgtYml0IGVuY29kZWQgZm9udHMKXHJlbmV3Y29tbWFuZHtcc2ZkZWZhdWx0fXtwaHZ9CQkJ
CQklIGNoYW5nZXMgdGhlIGRlZmF1bHQgZm9udAoKJVx1c2VwYWNrYWdlW3BhcmZpbGxde3BhcnNr
aXB9ICAgICAgJUluc3RlYWQgb2YgaW5kZW50aW5nIG9uIGEgbmV3bGluZSBhZGRzIHdoaXRlc3Bh
Y2UKCgoKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSAgICAgIFRhYmxlcyBhbmQg
ZmlndXJlcyAgICAgICUKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKClx1c2VwYWNr
YWdle3RhYnVsYXJ4LGJvb2t0YWJzLGF1dGhibGt9CQkgICAgJSB2YXJpb3VzIGJhc2ljIHN0dWZm
IGZvciB0YWJsZXMgYW5kIG1vcmUKCiUgRmlndXJlcyBhbmQgY2FwdGlvbnMKXHVzZXBhY2thZ2V7
Y2FwdGlvbn0JCQkJCQkJJSBjcmVhdGUgY2FwdGlvbnMgZm9yIGZpZ3VyZXMKXHVzZXBhY2thZ2V7
c3ViZmlnfQkJCQkJCQkJJSBjcmVhdGUgc3ViZmlndXJlcyBvZiBhIGZpZ3VyZQolXHVzZXBhY2th
Z2V7c3ViY2FwdGlvbn0JCQkJCSUgY3JlYXRlIGNhcHRpb25zIGZvciBzdWJmaWd1cmVzCiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAlICAgICBjdXJyZW50bHkgb2ZmLCBkdWUgdG8g
Y29uZmxpY3RzCgpcdXNlcGFja2FnZXt3cmFwZmlnfQkJCQkJCQklIGxldHRpbmcgZmlndXJlcyBi
ZSBpbiB0ZXh0CgpcdXNlcGFja2FnZXtyb3RhdGluZ30gICAgICAgICAgICAgJSBsZXQgYW55IGVu
dmlyb25tZW50IGJlIHJvdGF0ZWQgKGZpZ3VyZXMgc2lkZXdheXMpCiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAlICAgICBcYmVnaW57c2lkZXdheXN9IG9yIFxiZWdpbnt0dXJufXsz
MH0KCgoKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCiUgICAgICAgICAgIFZh
cmlhYmxlcyAgICAgICAgICAgICAgJQolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUl
JSUKXHVzZXBhY2thZ2V7cGdma2V5c30JCQklSW5pdGlhbGl6ZSB0aGUgdmFyaWFibGUga2V5LXZh
bHVlIHBhcmlycwoKXG5ld2NvbW1hbmR7XHNldHZhbHVlfVsxXXtccGdma2V5c3svdmFyaWFibGVz
LyMxfX0KXG5ld2NvbW1hbmR7XGdldHZhbHVlfVsxXXtccGdma2V5c3ZhbHVlb2Z7L3ZhcmlhYmxl
cy8jMX19ClxuZXdjb21tYW5ke1xkZWNsYXJlfVsxXXslCiBccGdma2V5c3sKICAvdmFyaWFibGVz
LyMxLmlzIGZhbWlseSwKICAvdmFyaWFibGVzLyMxLnVua25vd24vLnN0eWxlID0ge1xwZ2ZrZXlz
Y3VycmVudHBhdGgvXHBnZmtleXNjdXJyZW50bmFtZS8uaW5pdGlhbCA9ICMjMX0KIH0lCn0KClxk
ZWNsYXJle30KCgoKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSAgICAgIExhVGVY
IFByb2dyYW1taW5nICAgICAgICUKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKClx1
c2VwYWNrYWdle3hwYXJzZX0JCQkJCQkJCSUgU2Nhbm5pbmcgYXJndW1lbnRzClx1c2VwYWNrYWdl
e3hpZnRoZW59CQkJCQkJCSUgQ29uZGl0aW9uYWxzClx1c2VwYWNrYWdle3hzdHJpbmd9ICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICUgU3RyaW5nIGZ1bmN0aW9ucwpcdXNlcGFja2FnZXtjYWxj
fQkJCQkJCQkJJSBDYWxjdWxhdGlvbnMKCgoKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUl
JSUKJSAgICAgICAgICBIeXBlcm1lZGlhICAgICAgICAgICUKJSUlJSUlJSUlJSUlJSUlJSUlJSUl
JSUlJSUlJSUlJSUKClx1c2VwYWNrYWdle3VybCwgaHlwZXJyZWZ9CQkJCQkJCSUgXHVybHtsaW5r
fSBhbmQgXGhyZWZ7bGlua317cmVwbGFjaW5nIHRleHR9CgolTWFjcm9zIHRha2VuIGZyb20gdGhl
IHByZWFtYmxlIG9mIHRoZSBNYXRGeXNUdXRvciBMYVRlWCBHdWlkZS4KXG5ld2NvbW1hbmQqe1xo
dHRwfVsxXXtcaHJlZntodHRwOi8vIzF9eyMxfX0JCSUgbWFjcm8gZm9yIGh0dHAgbGlua3M6IFxo
dHRwe3d3dy5tYXRmeXN0dXRvci5ka30KXG5ld2NvbW1hbmQqe1xtYWlsdG99WzFde1xocmVme21h
aWx0bzojMX17IzF9fQkJJSBtYWNybyBmb3IgbWFpbHM6IFxtYWlsdG97ZW1haWxAZW1haWwuY29t
fQoKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSAgICAgICAgIFN0eWxpemF0aW9u
ICAgICAgICAgICUKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKCiUgSGVhZGVycyBv
ZyBmb290ZXJzClx1c2VwYWNrYWdle2xhc3RwYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAg
ICUgXGxhc3RwYWdlIGNvbW1hbmQgZm9yIG51bWJlcnMgb2YgcGFnZXMKXHVzZXBhY2thZ2V7ZmFu
Y3loZHJ9ICAgICAgICAgICAgICAgICAgICAgICAgICAgJSBjcmVhdGUgY29vbCBoZWFkZXJzIGFu
ZCBmb290ZXJzClxwYWdlc3R5bGV7ZmFuY3l9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICUgd2hvIGRvZXNuJ3Qgd2FudCB0aGVpciBwYWdlIHRvIGJlIGZhbmN5PwoKJSBVc2Ugb2YgY29s
dW1ucwpcdXNlcGFja2FnZXttdWx0aWNvbH0KCiUgUXVvdGF0aW9ucwolICJkYW5pc2giIG9yICJi
cml0aXNoIgpcdXNlcGFja2FnZVtkYW5pc2g9Z3VpbGxlbWV0c117Y3NxdW90ZXN9ICAgIAklIHR3
byBzdHlsZXM6ICJxdW90ZXMiIG9yID4+Z3VpbGxlbWV0czw8CiVcTWFrZUF1dG9RdW90ZXvCu317
wqt9ICAgICAgICAgICAgICAgICAgICAgICAJJSBkZWNvbW1lbnQgZm9yIGVhc3kgbWFjcm8KJVxN
YWtlQXV0b1F1b3RlKnvigLp9e+KAuX0gICAgICAgICAgICAgICAgICAgICAgCSUgZGVjb21tZW50
IGZvciBldmVuIGVhc2llciBtYWNyb3MKCiUgTGlrZSBhIHBhcmFncmFwaCwgYnV0IGFkZHMgYWxz
byBhIGxpbmVicmVhayBhZnRlci4gKEFsc28gaXMgbm90IHJlY29yZGVkIG9uIGxhYmVsbGluZykK
XG5ld2NvbW1hbmR7XGxicGFyYWdyYXBofVsxXXtcdnNwYWNlezAuM2VtfSBcbm9pbmRlbnQgXHRl
eHRiZnsjMX1cXCBcbm9pbmRlbnR9CgolIFVuZGVybGluaW5nIGFuZCBzdHJpa2V0aHJvdWdoIHRl
eHQKXHVzZXBhY2thZ2Vbbm9ybWFsZW1de3VsZW19CgolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUl
JSUlJSUlJQolICAgICAgICAgICAgIE1hdGggICAgICAgICAgICAgJQolJSUlJSUlJSUlJSUlJSUl
JSUlJSUlJSUlJSUlJSUlJQolXG5ld2NvbW1hbmR7XGhtbWF4fXswfQkJCQkJCQkJJSBtaW5pbWl6
ZXMgdGhlIGFtb3VudCBvZiBib2xkIGZhbWlsaWVzCiVcbmV3Y29tbWFuZHtcYm1tYXh9ezF9CQkJ
CQkJCQklIHRoaXMgYWxsb3dzIGZvciBtb3JlIG1hdGggZmFtaWxpZXMKCiUgdmFyaW91cyBiYXNp
YyBzdHVmZgpcdXNlcGFja2FnZXttYXRodG9vbHMsIGFtc21hdGh9ClxhbGxvd2Rpc3BsYXlicmVh
a3MgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAlIGFsbG93IHBhZ2VicmVha3MgaW4g
YWxpZ24qID8KCiUgb3RoZXIgbWF0aCBnb29kaWVzClx1c2VwYWNrYWdle2NhbmNlbH0KCiUgVmFy
aW91cyBzeW1ib2wgcGFja2FnZXMKXHVzZXBhY2thZ2V7YW1zc3ltYn0KXHVzZXBhY2thZ2VbdXRv
cGlhXXttYXRoZGVzaWdufQkJCQkJICAgICUgZnVsbCBvdmVyd3JpdGUgb2YgdGhlIGZvbnQgc3lz
dGVtClx1c2VwYWNrYWdle3N0bWFyeXJkfQkJCQkJCQkJJSBldmVuIG1vcmUgc3ltYm9scwoKXERl
Y2xhcmVNYXRoQWxwaGFiZXR7XG1hdGhwemN9e09UMX17cHpjfXttfXtpdH0gICAgICUgXG1hdGhw
emMgYSBsZXNzIHBvbXBvdXMgY3VybHkgdHlwZXNldAoKJSBNYXRoIHNob3J0Y3V0cwpccmVuZXdj
b21tYW5ke1xkfXtcLCBcbWF0aHJte2R9fSAgICAgICAgICAgICAgICAgICAgJSBcZCA9IGRpZmZl
cmVudGlhbCBkIHdpdGggYSBiaXQgb2Ygc3BhY2luZwpcbmV3Y29tbWFuZHtcZX17XG1hdGhybXtl
fX0gICAgICAgICAgICAgICAgICAgICAgICAgJSBcZSA9IGV1bGVycyBudW1iZXIKXG5ld2NvbW1h
bmR7XFJ9e1xtYXRoYmJ7Un19ICAgICAgICAgICAgICAgICAgICAgICAgICUgXFIgPSBSZWFsIG51
bWJlcnMKXG5ld2NvbW1hbmR7XE59e1xtYXRoYmJ7Tn19ICAgICAgICAgICAgICAgICAgICAgICAg
ICUgXE4gPSBOYXR1cmFsIG51bWJlcnMKXG5ld2NvbW1hbmR7XEN9e1xtYXRoYmJ7Q319ICAgICAg
ICAgICAgICAgICAgICAgICAgICUgXEMgPSBDb21wbGV4IG51bWJlcnMKXG5ld2NvbW1hbmR7XFF9
e1xtYXRoYmJ7UX19ICAgICAgICAgICAgICAgICAgICAgICAgICUgXFEgPSBSYXRpb25hbCBudW1i
ZXJzClxuZXdjb21tYW5ke1xGfXtcbWF0aGJie0Z9fQkJCQkJCQklIFxGID0gRmllbGQKXG5ld2Nv
bW1hbmR7XEt9e1xtYXRoYmJ7S319CQkJCQkJCSUgXEsgPSBGaWVsZCBcUiBhbmQgXEMKXG5ld2Nv
bW1hbmR7XFZ9e1xtYXRocHpje1Z9fQkJCQkJCSUgXFYKXG5ld2NvbW1hbmR7XFd9e1xtYXRocHpj
e1d9fQkJCQkJCSUgXFcKXHJlbmV3Y29tbWFuZHtcU317XG1hdGhiYntTfX0JCQkJCQklIFxTID0g
U2V0IG9mIHBlcm11dGF0aW9ucwoKXG5ld2NvbW1hbmR7XERldH1bMV17XHRleHR7RGV0fVxsZWZ0
KCAjMSBccmlnaHQpfSAgICUgXERldHthcmd9ICAgICAgICAgICAgIERldChhcmcpClxuZXdjb21t
YW5ke1xTcGFufVsxXXtcdGV4dHtTcGFufVxsZWZ0KCAjMSBccmlnaHQpfSAlIFxTcGFue2FyZ30J
CQlTcGFuKGFyZykKXG5ld2NvbW1hbmR7XHNnbn1bMV17XHRleHR7c2dufSBcbGVmdCggIzEgXHJp
Z2h0KX0gICUgXHNnbnthcmd9CQkJCXNuZyhhcmcpCgpcbmV3Y29tbWFuZHtcYWJzfVsxXXtcbGVm
dFxsdmVydCAjMSBccmlnaHRccnZlcnR9CQkJJSBcYWJze2FyZ30JCWFic29sdXRlL21vZHVsbyBv
ZiB2YWx1ZQpcbmV3Y29tbWFuZHtcbm9ybX1bMV17XGxlZnRcbFZlcnQgIzEgXHJpZ2h0XHJWZXJ0
fQkJCSUgXG5vcm17YXJnfQlub3JtIG9mIGEgdmFsdWUKXG5ld2NvbW1hbmR7XGNlaWx9WzFde1xs
ZWZ0XGxjZWlsICMxIFxyaWdodFxyY2VpbH0JCQklIFxjZWlse2FyZ30JY2VpbGluZyBvZiBhIHZh
bHVlClxuZXdjb21tYW5ke1xmbG9vcn1bMV17XGxlZnRcbGZsb29yICMxIFxyaWdodFxyZmxvb3J9
CQklIFxmbG9vcnthcmd9CWZsb29yIG9mIGEgdmFsdWUKXG5ld2NvbW1hbmR7XGlucHJvZH1bMl17
XGxlZnRcbGFuZ2xlICMxICwgIzIgXHJpZ2h0XHJhbmdsZX0JJSBcaW5wcm9ke2FyZ30JaW5uZXIg
cHJvZHVjdAoKXG5ld2NvdW50ZXJ7aX0KClxEZWNsYXJlRG9jdW1lbnRDb21tYW5kIFxzZXEgeyBn
IGcgZyBnIH0gewkJCSUgXHNlcXt4fXtpfXtqfXtzfQoJXHNldGNvdW50ZXJ7aX17MH0JCQkJCQkJ
CSUgeF9pLCB4X2krcywgLi4uIHhfagoJXElmVmFsdWVUIHsjMn0geyBcYWRkdG9jb3VudGVye2l9
eyMyfSB9CglcSWZWYWx1ZVRGIHsjMX0KCQl7IzF9CgkJe3h9CglfeyBcYXJhYmlje2l9IH0sCglc
SWZWYWx1ZVRGIHsjNH0gCgkJe1xhZGR0b2NvdW50ZXJ7aX17IzR9fQoJCXtcYWRkdG9jb3VudGVy
e2l9ezF9fQoJXElmVmFsdWVURiB7IzF9IAoJCXsjMX0KCQl7eH0gCglfeyBcYXJhYmlje2l9IH0s
CglcZG90cwoJXElmVmFsdWVURiB7IzN9CgkJeyAsICMxX3sjM30gfQoJCXt9Cn0KClxEZWNsYXJl
RG9jdW1lbnRDb21tYW5kIFxlcm8geyBnIGcgfSB7CQkJCSUgXGVybyB7eCwgeX0KCVxiZWdpbnth
cnJheX17Y30JCQkJCQkJCSUJeAoJCVxJZlZhbHVlVEZ7IzF9CQkJCQkJCQklCX4KCQkJe197IzF9
fQkJCQkJCQkJCSUJeQoJCQl7XHBoYW50b217XHNpbX19CglcXAoJCVxzaW0KCVxcCgkJXElmVmFs
dWVURnsjMn0KCQkJe157IzJ9fQoJCQl7XHBoYW50b217XHNpbX19CglcZW5ke2FycmF5fQp9Cgpc
RGVjbGFyZURvY3VtZW50Q29tbWFuZCBcY29vcnZlYyB7IG0gZyB9ewkJCSUgXGNvb3J2ZWN7dn17
Vn0JQ29vcmRpbmF0ZSB2ZWN0b3IKCVxsZWZ0WwoJCSMxCglccmlnaHRdCgl7X3sKCQlcSWZWYWx1
ZVRGeyMyfQoJCQl7IzJ9CgkJCXtcZXBzaWxvbn0KCX19Cn0KClxEZWNsYXJlRG9jdW1lbnRDb21t
YW5kIFxtYXRyZXAgeyBnIGcgZyB9IHsJCQklIFxtYXRyZXB7V317TH17Vn0JTWF0cml4cmVwcmVz
ZW50YXRpb24KCXtfewkJCQkJCQkJCQkJCSUgV1tMXVYKCQlcSWZWYWx1ZVRGIHsjMX0JCQkJCQkJ
CQklTm8gYXJndW1lbnRzIGZvciBXIG9yIFYgcmVzdWx0cyBpbiBzdGFuZGFyZGJhc2lzCgkJCXsj
MX0JCQkJCQkJCQkJJU5vIGFyZ3VtZW50cyBmb3IgTCByZXN1bHRzIGluIGNvb3JkaW5hdGV0cmFu
c2Zvcm1hdGlvbgoJCQl7XGVwc2lsb259Cgl9fQoJXGxlZnRbCgkJXElmVmFsdWVURiB7IzJ9CgkJ
CXsjMn0KCQkJe1xzcXVhcmV9CglccmlnaHRdIHtfewoJCVxJZlZhbHVlVEYgeyMzfQoJCQl7IzN9
CgkJCXtcZXBzaWxvbn0KCX19Cn0KClxEZWNsYXJlRG9jdW1lbnRDb21tYW5kIFxzZXQgeyBtIGcg
fXsgCQkJCSUgXHNldHN7WH17Q30KCSBcbGVmdFxsYnJhY2UJCQkJCQkJCQklIHtYIHwgQ30KCSAJ
IzEgXElmVmFsdWVUIHsjMn0geyBcIHwgXCAgIzIgfQoJIFxyaWdodFxyYnJhY2UKfQoKXG1ha2Vh
dGxldHRlcgkJCQkJCQkJCQklIGFkZHMgdmVydGljYWwgbGluZXMgdG8gbWF0cmljZXMKXHJlbmV3
Y29tbWFuZCpcZW52QG1hdHJpeFsxXVsqXGNATWF4TWF0cml4Q29scyBjXXsKICBcaHNraXAgLVxh
cnJheWNvbHNlcAogIFxsZXRcQGlmbmV4dGNoYXJcbmV3QGlmbmV4dGNoYXIKICBcYXJyYXl7IzF9
fQpcbWFrZWF0b3RoZXIKCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCiUgICAgICBM
b2dpYyBhbmQgcHJvb2ZzICAgICAgICAlCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUl
CgolIFByb29mcwpcdXNlcGFja2FnZXthbXN0aG19CQkJCQkJCQklIFRoZW9yZW0gcGFja2FnZQpc
dGhlb3JlbXN0eWxle2RlZmluaXRpb259CQkJCQkJJSBwbGFpbiwgZGVmaW5pdGlvbiwgcmVtYXJr
CiVcc3dhcG51bWJlcnMJCQkJCQkJCQklIElmIHlvdSB3YW50IHRvIGhhdmUgdGhlIG51bWJlciBm
aXJzdAoKJSBMb2dpYyBwYWNrYWdlcwpcdXNlcGFja2FnZXtscGxmaXRjaH0JCQkJCQklIGZpdGNo
IHN0eWxlIHByb29mcwoKJVx1c2VwYWNrYWdle2xvZ2ljcHJvb2Z9CQkJCQklIGFsdGVybmF0aXZl
IHBhY2thZ2UsIHJlc2VtYmxpbmcgdGhlIGRCZXJMb2cgYm9vawolXHNldGxlbmd0aFxzdWJwcm9v
Zmhvcml6c3BhY2V7MmVtfQkJCSUgSW5kZW50IGZvciBzdWJwcm9vZnMuIENoYW5nZWQgZm9yIGZy
ZXNoIHZhcmlhYmxlcwoKCgolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQolICAgICAg
Q29sb3IgYW5kIHByZXNldHMgICAgICAgJQolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUl
JQoKJVx1c2VwYWNrYWdle3hjb2xvcn0JCQkJCQkJJSBiYXNpYyB4Y29sb3IgcGFja2FnZQpcdXNl
cGFja2FnZVt0YWJsZSx4Y2RyYXdde3hjb2xvcn0JCQkJJSB4Y29sb3IgcGFja2FnZSB3aXRoIHN1
cHBvcnQgZm9yIHRhYmxlcwpcdXNlcGFja2FnZXtjb2xvcnRibH0gICAgICAgICAgICAgICAgICAg
ICAgICAgICAlIGNvbG9yIHByZXNldHMgd29ya2luZyB0b2dldGhlciB3aXRoIHhjb2xvcgoKXGRl
ZmluZWNvbG9ye2xzdENvbW1lbnR9e3JnYn17MC40NSwwLjQ1LDAuNDV9CSUgY29kZTogY29tbWVu
dHMgKEdyZXkpClxkZWZpbmVjb2xvcntsc3RLZXl9e3JnYn17MC4xMywwLjIxLDF9CQkJJSBjb2Rl
OiBwcmltYXJ5IGtleXdvcmRzIChCbHVlKQpcZGVmaW5lY29sb3J7bHN0S2V5Mn17cmdifXsxLDAu
NjY2NjY3LDAuMTM3MjZ9ICAlIGNvZGU6IHNlY29uZGFyeSBrZXl3b3JkcyAoRGF5WzldIE9yYW5n
ZSkKXGRlZmluZWNvbG9ye2xzdFN0cmluZ317cmdifXswLjEsMC42NSwwLjF9CQklIGNvZGU6IHN0
cmluZ3MgKEdyZWVuKQpcZGVmaW5lY29sb3J7bHN0QmFzZX17cmdifXswLjAsMC4wLDAuMH0JCQkl
IGNvZGU6IGJhc2UgKEJsYWNrKQoKCgolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQol
ICAgICAgICAgICAgVGlreiAgICAgICAgICAgICAgJQolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUl
JSUlJSUlJQoKXHVzZXBhY2thZ2V7dGlren0JCQkJCQkJCSUgaW1wb3J0IGJhc2VwYWNrYWdlClx1
c2V0aWt6bGlicmFyeXtjYWxjfQkJCQkJCQklIENvb3JkaW5hdGUgY2FsY3VhdGlvbnMKXHVzZXRp
a3psaWJyYXJ5e3Bvc2l0aW9uaW5nfSAgICAgICAgICAgICAgICAgICAgJSBSZWxhdGl2ZSBwb3Np
dGlvbmluZwpcdXNldGlremxpYnJhcnl7c2hhcGVzfSAgICAgICAgICAgICAgICAgICAgICAgICAl
IERlZmluaW5nIG5vZGVzaGFwZXMgYW5kIG1vcmUgKGlzYSBmb3IgRS9SKQoKJSBTaW1wbGUgdHJl
ZSBtYWNybyB3aXRoIGNvbXBhYmlsaXR5IHRvIHRpa3oKXHVzZXBhY2thZ2V7dGlrei1xdHJlZX0J
CQkJCQkJJSBpbXBvcnQgc2ltcGxlIHRyZWUgbWFjcm8KXHVzZXRpa3psaWJyYXJ5e2Fycm93c30g
ICAgICAgICAgICAgICAgICAgICAgICAgJSBhcnJvd3MgZm9yIHRyZWVzCgolIFRpa3ogc2V0dGlu
Z3MgZm9yIHJlZC1ibGFjayB0cmVlcwpcdGlrenNldHsKICB0cmVlbm9kZS8uc3R5bGUgPSB7YWxp
Z249Y2VudGVyLCBpbm5lciBzZXA9MHB0LCB0ZXh0IGNlbnRlcmVkLAogICAgZm9udD1cc2ZmYW1p
bHl9LAogIGFybl9iLy5zdHlsZSA9IHt0cmVlbm9kZSwgY2lyY2xlLCB3aGl0ZSwgZm9udD1cc2Zm
YW1pbHlcYmZzZXJpZXMsIGRyYXc9YmxhY2ssCiAgICBmaWxsPWJsYWNrLCB0ZXh0IHdpZHRoPTEu
NWVtfSwgICAgICAgICAgICAgICUgYmxhY2sgbm9kZQogIGFybl9yLy5zdHlsZSA9IHt0cmVlbm9k
ZSwgY2lyY2xlLCB3aGl0ZSwgZm9udD1cc2ZmYW1pbHlcYmZzZXJpZXMsIGRyYXc9cmVkLAogICAg
ZmlsbD1yZWQsIHRleHQgd2lkdGg9MS41ZW19LCAgICAgICAgICAgICAgJSByZWQgbm9kZQogIGFy
bl94Ly5zdHlsZSA9IHt0cmVlbm9kZSwgcmVjdGFuZ2xlLCBkcmF3PWJsYWNrLCBmaWxsPWJsYWNr
LAogICAgbWluaW11bSB3aWR0aD0wLjVlbSwgbWluaW11bSBoZWlnaHQ9MC41ZW19ICAlIG5pbCBu
b2RlCn0KCiUgVGlreiBBdXRvbW90YSBmb3IgVHVyaW5nIE1hY2hpbmVzClx1c2V0aWt6bGlicmFy
eXthdXRvbWF0YX0KCiUgVGlreiBFL1IgZGlhZ3JhbQpcdXNldGlremxpYnJhcnl7ZXJ9CgolIEdy
YXBoaWNzIGFuZCBwbG90cwpcdXNlcGFja2FnZXtncmFwaGljeH0JCQkJCQkJJSBpbXBvcnQgYmFz
ZXBhY2thZ2UgZm9yIGdyYXBocwpcdXNlcGFja2FnZXtwZ2ZwbG90c30JCQkJCQkJJSBpbXBvcnQg
cGdmcGxvdHMKXHVzZXBnZnBsb3RzbGlicmFyeXtmaWxsYmV0d2Vlbn0JCQkJJSBhZGQgZmlsbEJl
dHdlZW4gY29tbWFuZApccGdmcGxvdHNzZXR7Y29tcGF0PTEuMTB9CQkJCQkJJSBjaG9vc2UgdmVy
c2lvbiBvZiBwZ2ZwbG90cwoKJSBNYWNybyBmb3IgY2lyY2xlIHdpdGggc3ltYm9sIGluc2lkZS4K
XG5ld2NvbW1hbmQqXGNpcmNsZWRbMV17IFx0aWt6W2Jhc2VsaW5lPShDLmJhc2UpXVxub2RlW2Ry
YXcsY2lyY2xlLGlubmVyIHNlcD0wLjVwdF0oQykgeyMxfTtcIX0KCgoKJSUlJSUlJSUlJSUlJSUl
JSUlJSUlJSUlJSUlJSUlJSUKJSAgICAgICAgICAgIENvZGUgICAgICAgICAgICAgICUKJSUlJSUl
JSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKXG5ld2NvbW1hbmR7XGNvZGV9WzFde3tcc2YgIzF9
fQkJCQkJJSBcY29kZXtYfSB3cml0ZXMgWCBpbiBhIGNvZGUtYXBwcm9wcmlhdGUgZm9udAoKCgoK
JSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSAgICAgICAgIGxzdGxpc3RpbmcgICAg
ICAgICAgICUKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKCiUgSW1wb3J0IGxzdGxp
c3RpbmdzIC0gYmVhdXRpZnVsIHNvdXJjZWNvZGUhClx1c2VwYWNrYWdle2xpc3RpbmdzfQoKCiUg
Q3VzdG9tIGxhbmd1YWdlIGRlZmluaXRpb25zCiUgRGVmaW5pdGlvbiBvZiBQc2V1ZG9jb2RlClxs
c3RkZWZpbmVsYW5ndWFnZXtwc2V1ZG9jb2RlfXsKICBrZXl3b3Jkcz1bMV17CiAgCSAgICAgYnJl
YWssIGJyZWFrLCBieSwgZG8sIGRvd250bywgZWxzZSwgZXJyb3IsIGZvciwgaWYsIHJlcGVhdCwg
cmV0dXJuLCB0bywgdW50aWwsIHdoaWxlLCB3aGlsZQogIAl9LAkJCQkJCQkJICAgIAkJJSBsaXN0
IG9mIGtleXdvcmRzLCBmaXJzdCBhbmQgbGFzdCBhcmUgbm90IHVzZWQgZm9yIHNvbWUgc3R1cGlk
IHJlYXNvbgogIGtleXdvcmRzPVsyXXsKICAgICAgICBhbmQsIGFuZCwgb3IsIE5JTCwgTklMCiAg
fQogIHNlbnNpdGl2ZT1mYWxzZSwJCQkJCQkJCSUga2V5d29yZHMgYXJlIG5vdCBjYXNlLXNlbnNp
dGl2ZQogIG1vcmVjb21tZW50PVtsXXsvL30sCQkJCQkJCSUgbCBpcyBmb3IgbGluZSBjb21tZW50
CiAgbW9yZWNvbW1lbnQ9W3Ndey8qfXsqL30sCQkJCQkJJSBzIGlzIGZvciBzdGFydCBhbmQgZW5k
IGRlbGltaXRlcgogIG1vcmVzdHJpbmc9W2JdIgkJCQkJCQkJJSBzdHJpbmdzIGFyZSBlbmNsb3Nl
ZCBpbiBkb3VibGUgcXVvdGVzCn0KCgolIFNldHRpbmdzIGZvciBsc3RsaXN0aW5ncwpcbHN0c2V0
e2xhbmd1YWdlPXBzZXVkb2NvZGUsCQkJCQklIGNob29zZSBsYW5ndWFnZQogIGNvbHVtbnM9Zmxl
eGlibGUsCQkJCQkJCQklIGxldCB0aGUgYm94IGFsaWduIHRvIHRoZSB3aWR0aCBvZiB0aGUgcGFn
ZQogICAgbGl0ZXJhdGU9e8OmfXt7XGFlfX0xe8O4fXt7XG99fTF7w6V9e3tcYWF9fTEJJSBhbGxv
dyDDpiwgw7ggYW5kIMOlIGluIGNvZGUKICAgICAgICAgICB7w4Z9e3tcQUV9fTF7w5h9e3tcT319
MXvDhX17e1xBQX19MSwJJSAJKHRoaXMgY2hhbmdlIHdhcyB0YWtlbiBmcm9tIHRoZSBwcmVhbWJs
ZSBvZiB0aGUgTWF0RnlzVHV0b3IgTGFUZVggR3VpZGUpCiAgYnJlYWtsaW5lcz10cnVlLAkJCQkJ
CQkJJSBhdXRvbWF0aWNhbGx5IGJyZWFrIGxpbmVzCiAgYnJlYWthdHdoaXRlc3BhY2U9dHJ1ZSwJ
CQkJCQklIGF1dG9tYXRpY2FsbHkgYnJlYWsgc2hvdWxkIHRoZXJlIG9ubHkgYmUgd2hpdGUgc3Bh
Y2UuCiAgbnVtYmVycz1sZWZ0LAkJCQkJCQkJCSUgbnVtYmVyaW5nOiBub25lLCBsZWZ0LCByaWdo
dAogIG51bWJlcnNlcD01cHQsCQkJCQkJCQklIGRpc3RhbmNlIGJldHdlZW4gbGluZW51bWJlcnMg
YW5kIGNvZGUKICBudW1iZXJzdHlsZT1cY29sb3J7bHN0Q29tbWVudH0sCQkJCSUgY2hhbmdlIHN0
eWxlIG9mIG51bWJlcmluZyAtIGN1cnJlbnRseSBncmV5LgogIHN0ZXBudW1iZXI9MSwJCQkJCQkJ
CQklIHN0ZXAgYmV0d2VlbiB0byBsaW5lLW51bWJlcnMuIDEgPSBlYWNoIGxpbmUgaXMgbnVtYmVy
ZWQKICBzaG93c3BhY2VzPWZhbHNlLAkJCQkJCQkJJSBzaG93IHNwYWNlcyBldmVyeXdoZXJlIC0g
YWRkaW5nIHBhcnRpY3VsYXIgdW5kZXJzY29yZXMKICBzaG93c3RyaW5nc3BhY2VzPWZhbHNlLAkJ
CQkJCSUgdW5kZXJsaW5lIHNwYWNlcyB3aXRoaW4gc3RyaW5ncyBvbmx5LgogIHNob3d0YWJzPWZh
bHNlLAkJCQkJCQkJJSBzaG93IHRhYnMgd2l0aGluIHN0cmluZ3MgYWRkaW5nIHBhcnRpY3VsYXIg
dW5kZXJzY29yZXMuCiAgZXNjYXBlaW5zaWRlPXsqQH17QCp9LCAgICAgICAgICAgICAgICAJCSUg
aWYgeW91IHdhbnQgdG8gYWRkIExhVGVYIHdpdGhpbiB5b3VyIGNvZGUKICBiYXNpY3N0eWxlPVx0
dGZhbWlseSBcY29sb3J7bHN0QmFzZX0sCQkJJSBzZXQgYmFzaWMgY29sb3IKICBjb21tZW50c3R5
bGU9XGNvbG9ye2xzdENvbW1lbnR9LAkJCQklIHNldCBjb2xvciBvZiBjb21tZW50cwogIGtleXdv
cmRzdHlsZT1bMV1cY29sb3J7bHN0S2V5fSwJCQkJJSBzZXQgY29sb3Igb2YgcHJpbWFyeSBrZXl3
b3JkcwogIGtleXdvcmRzdHlsZT1bMl1cY29sb3J7bHN0S2V5Mn0sCQkJCSUgc2V0IGNvbG9yIG9m
IHNlY29uZGFyeSBrZXl3b3JkcwogIHN0cmluZ3N0eWxlPVxjb2xvcntsc3RTdHJpbmd9LAkJCQkl
IHNldCBjb2xvciBvZiBzdHJpbmdzCn0KCiUgbHN0bGlzdGluZyAtIFB1dCBpdCBiZWF1dGlmdWxs
eSBpbiB0aGUgbWlkZGxlClxsc3RzZXR7eGxlZnRtYXJnaW49IC4xXHRleHR3aWR0aCAsICAgICAJ
CQkJCQkJJSBsZWZ0bWFyZ2luIGJlaW5nIDEwJSBvZiB0aGUgY3VycmVudCB3aWR0aAogIHhyaWdo
dG1hcmdpbj0gLjFcdGV4dHdpZHRoLCAgICAgICAgICAgCQkJCQkJCSUgcmlnaHQgbWFyZ2luIGFs
c28gMTAlCiAgZnJhbWU9Ym90dG9tbGluZSAgICAgICAgICAgICAgICAgICAgICAJCQkJCQkJJSBE
cmF3IGEgbGluZSBvbiB0aGUgYm90dG9tIG9mIHRoZSBzdXJyb3VuZGluZyBib3gKfQoKJSBsc3Rs
aXN0aW5nIGhlYWRlcgpcRGVjbGFyZUNhcHRpb25Gb250e3doaXRlfXtcY29sb3J7d2hpdGV9fSAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICUgZm9udHN0eWxlIG9mIGNhcHRp
b24KXERlY2xhcmVDYXB0aW9uRm9ybWF0e2xpc3Rpbmd9e1xjb2xvcmJveHtncmF5fXtccGFyYm94
e1xsaW5ld2lkdGh9eyMxIzIjM319fSAgICAlIGNyZWF0ZSBuaWNlIGdyZXkgYm94ZXMgZm9yIGNh
cHRpb25zClxjYXB0aW9uc2V0dXBbbHN0bGlzdGluZ117Zm9ybWF0PWxpc3RpbmcsbGFiZWxmb250
PXdoaXRlLHRleHRmb250PXdoaXRlfSAgICAgICAgJSBhcHBseSBzZXR0aW5ncyB0byBsaXN0aW5n
CgoKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCiUgICAgICBUaXRsZSBhbmQg
aW5mb3JtYXRpb24gICAgICAgJQolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUK
XHNldHZhbHVle3RpdGxlID0gfQpcc2V0dmFsdWV7c3VidGl0bGUgPSB9CgpcRGVjbGFyZURvY3Vt
ZW50Q29tbWFuZCBcc2V0dGl0bGUgeyBtIGcgfXsgCQkJCSUgXHNldFRpdGxle3RpdGxlfXtzdWJ0
aXRsZX0KCSBcc2V0dmFsdWV7dGl0bGUgPSAjMX0KCSBcSWZWYWx1ZVRGIHsjMn0geyBcc2V0dmFs
dWV7c3VidGl0bGUgPSAjMn0gXHRpdGxle1xodWdlIFxnZXR2YWx1ZXt0aXRsZX0gXFwgXGxhcmdl
IFxnZXR2YWx1ZXtzdWJ0aXRsZX19fQoJIAkJCQkgeyBcdGl0bGV7XGh1Z2UgXGdldHZhbHVle3Rp
dGxlfX0gfQp9CgpcRGVjbGFyZURvY3VtZW50Q29tbWFuZCBcYWRkYXV0aCB7IG0gZyBnIH17IAkJ
CSUgXGFkZEF1dGh7bmFtZX17ZW1haWx9e2lkfQogICAgIFxJZlZhbHVlVCB7IzN9IHsJCSVTZXQg
dGhlIGlkIHRleHQgYXMgZGVzaXJlZCBvbiB0aGUgdG9wIGxlZnQKCSAJXHNldHZhbHVle2lkID0g
IzN9CgkgfQogICAgIFxwZ2ZrZXlzaWZkZWZpbmVkey92YXJpYWJsZXMvbmFtZX17CiAgICAgICAg
IFxzZXR2YWx1ZXtpZCA9IFwsIGV0IGFsfQogICAgIH17CiAgICAgICAgIFxzZXR2YWx1ZXtuYW1l
ID0gIzF9CiAgICAgfQkgCgkgXGF1dGhvcnsjMX0KCSBcSWZWYWx1ZVQgeyMyfSB7CgkgICAgXHBn
ZmtleXNpZmRlZmluZWR7L3ZhcmlhYmxlcy9lbWFpbH17CgkgICAgICAgICUgRG8gTm90aGluZwoJ
ICAgIH17CgkgCSAgICBcc2V0dmFsdWV7ZW1haWwgPSAjMn0KCSAJfQoJIAlcYWZmaWx7XHByb3Rl
Y3RcaHJlZnttYWlsdG86IzJ9eyMyfX0KCSB9Cn0KClxzZXR0aXRsZXtLZWVwIENhbG0gYW5kIFx0
ZXh0YmFja3NsYXNoIHNldHRpdGxlfQoKXGRhdGV7XHRvZGF5fQoKJUhlYWRlcnM6CiUgIFVudXNl
ZCBwaWVjZXMgb2YgY29kZQolICAgICBOYW1lIG9mIHdyaXRlcnMgICBccHJvdGVjdFxocmVme1xn
ZXR2YWx1ZXtlbWFpbH19e1xnZXR2YWx1ZXtuYW1lfVxnZXR2YWx1ZXtpZH19CiUgICAgICJvZiBY
IHBhZ2VzIiAgICAgIFxnZXR2YWx1ZXtvZn0gXHBhZ2VyZWZ7TGFzdFBhZ2V9CgolT2RkIHBhZ2Vz
IChNYWluIGZvciBvbmVzaWRlZCkKClxmYW5jeWhlYWRbTE9de1x0aGVwYWdlfQpcZmFuY3loZWFk
W1JPXXtcZ2V0dmFsdWV7dGl0bGV9fQoKJUV2ZW4gcGFnZXMKXGZhbmN5aGVhZFtMRV17XG5vdXBw
ZXJjYXNle1xsZWZ0bWFya319ClxmYW5jeWhlYWRbUkVde1x0aGVwYWdlfQoKJU5vdGhpbmcgYmVs
b3cKXGZhbmN5Zm9vdFtMQ1Jde30K
"""
preamble_en = """JSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSBTZXR0aW5ncyBmb3IgZG9jdW1l
bnQgKGVuZ2xpc2gpICUKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKCiUgSW5w
dXQgY29tbW9uIGRlZmluaXRpb24KXGlucHV0e3ByZWFtYmxlX2Jhc2UudGV4fQoKCiUlJSUlJSUl
JSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCiUgICBFbmNvZGluZyBhbmQgaHlwaGVuYXRpb24gICAl
CiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCiUgQmFzaWNzOiBmb250LCBjb2RlYyBl
dGMuClx1c2VwYWNrYWdlW2VuZ2xpc2hde2JhYmVsfQkJCQkJCSUgYmFiZWwgaXMgZm9yIGh5cGhl
bmF0aW9uIGFuZCBvdGhlciBnb29kaWVzCgoKCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUl
JSUlCiUgICAgICAgICBsc3RsaXN0aW5nICAgICAgICAgICAlCiUlJSUlJSUlJSUlJSUlJSUlJSUl
JSUlJSUlJSUlJSUlClxyZW5ld2NvbW1hbmR7XGxzdGxpc3RpbmduYW1lfXtDb2RlfSAgICAgICAg
ICAgICAgJSBmb3Igb25lIGJsb2NrIG9mIGNvZGUgYWxvbmUKXHJlbmV3Y29tbWFuZHtcbHN0bGlz
dGxpc3RpbmduYW1lfXtMaXN0IG9mIGNvZGV9ICAlIGZvciBtb3JlIHBpZWNlcyBvZiBjb2RlIGlu
IG9uZQoKCgolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQolICAgICAgTG9naWMgYW5k
IHByb29mcyAgICAgICAgJQolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQolIFRoZW9y
ZW0gZW52aXJvbm1lbnRzClxuZXd0aGVvcmVte3RoZW9yZW19e1RoZW9yZW19W3NlY3Rpb25dClxu
ZXd0aGVvcmVte2xlbW1hfVt0aGVvcmVtXXtMZW1tYX0KXG5ld3RoZW9yZW17cHJvcG9zaXRpb259
W3RoZW9yZW1de1Byb3Bvc2l0aW9ufQpcbmV3dGhlb3JlbXtjb3JvbGxhcnl9W3RoZW9yZW1de0Nv
cm9sbGFyeX0KXG5ld3RoZW9yZW17ZGVmaW5pdGlvbn1bdGhlb3JlbV17RGVmaW5pdGlvbn0KXG5l
d3RoZW9yZW17Y29uamVjdHVyZX1bdGhlb3JlbV17Q29uamVjdHVyZX0KXHJlbmV3Y29tbWFuZCp7
XHByb29mbmFtZX17UHJvb2Z9CgoKCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCiUg
ICAgICBFeGFtcGxlIGVudmlyb25tZW50ICAgICAlCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUl
JSUlJSUlClxuZXd0aGVvcmVte2V4YW1wbGV9W3RoZW9yZW1de0V4YW1wbGV9
"""
preamble_dk = """JSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQolIFNldHRpbmdzIGZvciBkb2N1bWVu
dCAoZGFuaXNoKSAlCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKCiUgSW5wdXQg
Y29tbW9uIGRlZmluaXRpb24KXGlucHV0e3ByZWFtYmxlX2Jhc2UudGV4fQoKJSUlJSUlJSUlJSUl
JSUlJSUlJSUlJSUlJSUlJSUlJSUKJSAgIEVuY29kaW5nIGFuZCBoeXBoZW5hdGlvbiAgICUKJSUl
JSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSBCYXNpY3M6IGZvbnQsIGNvZGVjIGV0Yy4K
XHVzZXBhY2thZ2VbZGFuaXNoXXtiYWJlbH0JCQkJCQklIGJhYmVsIGlzIGZvciBoeXBoZW5hdGlv
biBhbmQgb3RoZXIgZ29vZGllcwpccmVuZXdjb21tYW5ke1xkYW5pc2hoeXBoZW5taW5zfXsyMn0J
CQklIGV2ZW4gYmV0dGVyIGRhbmlzaCBoeXBoZW5hdGlvbiEKCiUgLmJpYiBkYW5pc2ggcmVkZWZp
bml0aW9uIGZvciBhdXRob3IgaW4gdGl0bGUKXHJlbmV3Y29tbWFuZFxBdXRoYW5keyBvZyB9Clxy
ZW5ld2NvbW1hbmRcQXV0aGFuZHN7LCBvZyB9ClxyZW5ld2NvbW1hbmRcQWZmaWxmb250e1xzbWFs
bH0KCgoKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSAgICAgICAgIGxzdGxpc3Rp
bmcgICAgICAgICAgICUKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKCiUgbHN0bGlz
dGluZyBsYW5ndWFnZSByZWRlZmluaXRpb25zClxyZW5ld2NvbW1hbmR7XGxzdGxpc3RpbmduYW1l
fXtLb2RlfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJSBmb3Ig
b25lIGJsb2NrIG9mIGNvZGUgYWxvbmUKXHJlbmV3Y29tbWFuZHtcbHN0bGlzdGxpc3RpbmduYW1l
fXtMaXN0ZSBhZiBcbHN0bGlzdGluZ25hbWUgcn0gICAgICAgICAgICAgICAgICAlIGZvciBtb3Jl
IHBpZWNlcyBvZiBjb2RlIGluIG9uZQoKCgolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUl
JQolICAgICAgTG9naWMgYW5kIHByb29mcyAgICAgICAgJQolJSUlJSUlJSUlJSUlJSUlJSUlJSUl
JSUlJSUlJSUlJQolIFRoZW9yZW0gZW52aXJvbm1lbnRzClxuZXd0aGVvcmVte3RoZW9yZW19e1PD
pnRuaW5nfVtzZWN0aW9uXQpcbmV3dGhlb3JlbXtsZW1tYX1bdGhlb3JlbV17TGVtbWF9ClxuZXd0
aGVvcmVte3Byb3Bvc2l0aW9ufVt0aGVvcmVtXXtQcm9wb3NpdGlvbn0KXG5ld3RoZW9yZW17Y29y
b2xsYXJ5fVt0aGVvcmVtXXtLb3JvbGxhcn0KXG5ld3RoZW9yZW17ZGVmaW5pdGlvbn1bdGhlb3Jl
bV17RGVmaW5pdGlvbn0KXG5ld3RoZW9yZW17Y29uamVjdHVyZX1bdGhlb3JlbV17Rm9ybW9kbmlu
Z30KXHJlbmV3Y29tbWFuZCp7XHByb29mbmFtZX17QmV2aXN9CgoKJSUlJSUlJSUlJSUlJSUlJSUl
JSUlJSUlJSUlJSUlJSUKJSAgICAgIEV4YW1wbGUgZW52aXJvbm1lbnQgICAgICUKJSUlJSUlJSUl
JSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKXG5ld3RoZW9yZW17ZXhhbXBsZX1bdGhlb3JlbV17RWtz
ZW1wZWx9Cg==
"""

    
parser = argparse.ArgumentParser(description='Make a LaTeX project from Steffan\'s awesome template')
parser.add_argument('path', type=str, nargs='+', help='the path to build the project')
parser.add_argument('-l', type=str, nargs=1, help='the language of the preamble, "en" or "dk"', default=["en"])
parser.add_argument('--zip', dest='zip', action='store_const', const=True, default=False, help='zip the resulting project')
#TODO: Add -c option to clean folders first / after
args = parser.parse_args()

preamble_locale = 'preamble_dk' if args.l[0] == 'dk' else 'preamble_en'
preamble_l_content = preamble_dk if args.l[0] == 'dk' else preamble_en
preamble_l_content = base64.decodestring( preamble_l_content )
preamble_base_content = base64.decodestring( preamble_base )
template_content = base64.decodestring( template )

#TODO: make this specifiable in the prepare.py
######## MODIFICATIONS ########

template_content = template_content.replace( '\subimport{../preamble/}{preamble_en.tex}',
'\subimport{preamble/}{' + preamble_locale + '.tex}')

###############################

PATH = " ".join(args.path)
if not os.path.exists(PATH):
    os.makedirs(PATH)
os.chdir(PATH)
if not os.path.exists('preamble'):
    os.mkdir('preamble')
with open(os.path.join('preamble', preamble_locale + '.tex'), 'w') as preamble_l_file:
    preamble_l_file.write(preamble_l_content)

with open(os.path.join('preamble', 'preamble_base.tex'), 'w') as preamble_base_file:
    preamble_base_file.write(preamble_base_content)

with open('template.tex', 'w') as template_file:
    template_file.write(template_content)

if args.zip:
    fname = os.getcwd() #includes the filepath, sice we cd'ed to it
    import zipfile
    zipf = zipfile.ZipFile(fname + '.zip', 'w', zipfile.ZIP_DEFLATED)
    zipf.write(os.path.join('preamble', preamble_locale + '.tex'))
    zipf.write(os.path.join('preamble', 'preamble_base.tex'))
    zipf.write('template.tex')
    zipf.close()
raw_input('Success, Press enter to exit')
